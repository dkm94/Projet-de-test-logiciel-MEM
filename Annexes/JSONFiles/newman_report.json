{
  "collection": {
    "_": {
      "postman_id": "45778485-f913-4176-ac79-d103443e33ab"
    },
    "item": [
      {
        "id": "8cbd7037-fc2b-42fd-8268-d6527cf48925",
        "name": "Auth",
        "item": [
          {
            "id": "beb98120-0654-40a2-a7bf-3bad63788ac9",
            "name": "MEM - POST Register HIGH QASM-TC-13",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "createAccount"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "email",
                    "value": "thesimpsons11@mail.com"
                  },
                  {
                    "key": "password",
                    "value": "Password123!"
                  },
                  {
                    "key": "firstPerson",
                    "value": "Julie"
                  },
                  {
                    "key": "secondPerson",
                    "value": "Serge"
                  }
                ]
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0cb1133d-3d88-4b77-90b1-68d587c6c6b2",
                  "type": "text/javascript",
                  "exec": [
                    "const responseSchema = {\r",
                    "    \"type\": \"object\",\r",
                    "    \"properties\": {\r",
                    "        \"success\": {\r",
                    "            \"type\": \"boolean\"\r",
                    "        },\r",
                    "        \"message\": {\r",
                    "            \"type\": \"string\"\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "pm.test(\"Response's object returns a success status and a message\", () => {\r",
                    "    pm.response.to.have.jsonSchema(responseSchema);\r",
                    "});\r",
                    "pm.test(\"The account creation is confirmed by a 200 or 201 status\", function () {\r",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                    "});\r",
                    "pm.test(\"Body matches string when the account is successfully created\", function () {\r",
                    "    pm.expect(pm.response.text()).to.include(\"Votre compte a été créé, vous pouvez dès à présent vous connecter\");\r",
                    "});\r",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "d20a27ba-9d4e-44e0-9f4e-d0e21ab7c589",
            "name": "MEM - POST Login HIGH QASM-TC-14",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "adminLogin"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": null
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "disabled": true,
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "disabled": true,
                    "key": "email",
                    "value": "test@test.com"
                  },
                  {
                    "disabled": true,
                    "key": "email",
                    "value": "be@be.com"
                  },
                  {
                    "disabled": true,
                    "key": "password",
                    "value": "Azerty123!"
                  },
                  {
                    "disabled": true,
                    "key": "password",
                    "value": "aaaa"
                  },
                  {
                    "key": "email",
                    "value": "testing@email.com"
                  },
                  {
                    "key": "password",
                    "value": "Azertyuiop12!"
                  }
                ]
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "52072f95-9f5c-4f6f-9ba4-3d7b8e1a33c0",
                  "type": "text/javascript",
                  "exec": [
                    "// Common test for all cases\r",
                    "pm.test(\"Response has correct structure\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    \r",
                    "    // Vérifie la présence des champs de base\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    \r",
                    "    // Token only if success\r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"token\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests by code status\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Status is 200\", function() {\r",
                    "            pm.expect(pm.response.code).to.equal(200);\r",
                    "        });\r",
                    "        \r",
                    "        pm.test(\"[SUCCESS] Valid credentials response\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.token).to.be.a(\"string\").and.not.empty;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Vous pouvez à présent accéder à votre compte.\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // FAIL (invalid email)\r",
                    "    case 404: // FAIL (invalid passwordt or wedding ID not found)\r",
                    "        pm.test(\"[FAIL] Status is 400/404\", function() {\r",
                    "            pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
                    "        });\r",
                    "        \r",
                    "        pm.test(\"[FAIL] Invalid credentials response\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Echec connexion, veuillez vérifier vos identifiants\");\r",
                    "            pm.expect(jsonData).to.not.have.property(\"token\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // ERREUR SERVEUR\r",
                    "        pm.test(\"[ERROR] Status is 500\", function() {\r",
                    "            pm.expect(pm.response.code).to.equal(500);\r",
                    "        });\r",
                    "        \r",
                    "        pm.test(\"[ERROR] Server error response\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Erreur serveur\");\r",
                    "            pm.expect(jsonData).to.not.have.property(\"token\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(\"[UNEXPECTED] Unexpected status code: \" + pm.response.code, function() {\r",
                    "            pm.expect.fail(\"Code de statut inattendu: \" + pm.response.code);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cf1d6f09-40b7-43fa-8d65-717e7f93a0ca",
        "name": "User",
        "item": [
          {
            "id": "40f4fc15-4d7a-402a-b24d-0cc230de5699",
            "name": "MEM - GET User account CRITICAL QASM-TC-16",
            "request": {
              "url": {
                "path": [
                  "api",
                  "admin",
                  "myAccount",
                  "{{accountId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9a460492-548b-4830-bcef-b34ae84a06f9",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Extraction de l'ID depuis l'URL\r",
                    "const urlSegments = pm.request.url.path;\r",
                    "const accountIdFromUrl = urlSegments[urlSegments.length - 1];\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Admin account found\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            const accountId = pm.variables.get(\"accountId\"); // Utilisation de la bonne variable\r",
                    "            \r",
                    "            // Vérification de base\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            pm.expect(response.data._id.toString()).to.equal(accountId.toString());\r",
                    "            \r",
                    "            // Validation contre le schéma\r",
                    "            pm.test(\"Data matches admin schema\", function() {\r",
                    "                const adminSchema = {\r",
                    "                    type: \"object\",\r",
                    "                    properties: {\r",
                    "                        _id: { type: \"string\" },\r",
                    "                        email: { \r",
                    "                            type: \"string\",\r",
                    "                            maxLength: 100\r",
                    "                        },\r",
                    "                        media: { type: \"string\" },\r",
                    "                        role: { type: \"string\" },\r",
                    "                        mariageID: { type: \"string\" }\r",
                    "                    },\r",
                    "                    required: [\"_id\", \"email\"]\r",
                    "                };\r",
                    "                \r",
                    "                pm.expect(response.data).to.have.jsonSchema(adminSchema);\r",
                    "            });\r",
                    "            \r",
                    "            // Vérifications spécifiques\r",
                    "            pm.test(\"Email format validation\", function() {\r",
                    "                pm.expect(response.data.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                    "                pm.expect(response.data.email.length).to.be.at.most(100);\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Admin account not found\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Compte introuvable !\");\r",
                    "            \r",
                    "            // Debug info\r",
                    "            console.log(`Account ID tested: ${accountIdFromUrl}`);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR] Server failure\", function() {\r",
                    "            pm.expect(pm.response.json()).to.deep.equal({\r",
                    "                success: false,\r",
                    "                message: \"Echec serveur\"\r",
                    "            });\r",
                    "            \r",
                    "            // Debug pour IDs invalides\r",
                    "            if (accountIdFromUrl.match(/^[0-9a-fA-F]{24}$/) === null) {\r",
                    "                console.log(`Potential invalid ID format: ${accountIdFromUrl}`);\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "74d864f8-8db5-49dd-925a-92e87e8a8bfe",
            "name": "MEM - POST Update password CRITICAL QASM-TC-17",
            "request": {
              "url": {
                "path": [
                  "api",
                  "admin",
                  "editPassword",
                  "{{accountId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "password",
                    "value": "Azertyuiop12!"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "50fbb341-896c-44a2-a21f-a8f824e31865",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Password updated successfully - Modification enregistrée\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Modification enregistrée\");\r",
                    "            \r",
                    "            // Optionnel : vérification que le mot de passe a bien été changé\r",
                    "            if (pm.variables.get(\"verifyPasswordChange\")) {\r",
                    "                pm.sendRequest({\r",
                    "                    url: `${pm.environment.get(\"API_URL\")}/login`,\r",
                    "                    method: \"POST\",\r",
                    "                    body: {\r",
                    "                        mode: 'raw',\r",
                    "                        raw: JSON.stringify({\r",
                    "                            email: pm.variables.get(\"adminEmail\"),\r",
                    "                            password: pm.variables.get(\"newPassword\") \r",
                    "                        })\r",
                    "                    }\r",
                    "                }, function(err, res) {\r",
                    "                    pm.expect(res.code).to.equal(200);\r",
                    "                });\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] Password update failed - \" + pm.response.json().message, function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.be.oneOf([\r",
                    "                \"Oups, une erreur s'est produite lors de la modification\",\r",
                    "                \"Oups, une erreur s'est produite\"\r",
                    "            ]);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Admin account not found - Impossible de trouver les données liées à votre compte\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Impossible de trouver les données liées à votre compte\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "9cc45bba-a214-4b06-b00e-cb04cd6ba78b",
            "name": "MEM - DELETE Delete account CRITICAL QASM-TC-18",
            "request": {
              "url": {
                "path": [
                  "api",
                  "admin",
                  "deleteAccount",
                  "{{accountId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "12c89da8-cf72-4378-af8c-fba973a69ad6",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "});\r",
                    "\r",
                    "// Extraction de l'ID depuis l'URL\r",
                    "const urlSegments = pm.request.url.path;\r",
                    "const adminIdFromUrl = urlSegments[urlSegments.length - 1];\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Account deleted - Votre compte a été supprimé avec succès\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Votre compte a été supprimé avec succès\");\r",
                    "            \r",
                    "            // Vérification que le compte est bien supprimé\r",
                    "            pm.sendRequest({\r",
                    "                url: pm.request.url,\r",
                    "                method: \"GET\"\r",
                    "            }, function(err, res) {\r",
                    "                pm.expect(res.code).to.equal(404);\r",
                    "                pm.expect(res.json().message).to.equal(\"Votre compte est introuvable !\");\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] Deletion error - Oups, une erreur s'est produite lors de la suppression du compte\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Oups, une erreur s'est produite lors de la suppression du compte\");\r",
                    "            \r",
                    "            // Debug info\r",
                    "            if (adminIdFromUrl.match(/^[0-9a-fA-F]{24}$/) === null) {\r",
                    "                console.log(`Potential invalid ID format: ${adminIdFromUrl}`);\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Account not found - Votre compte est introuvable !\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Votre compte est introuvable !\");\r",
                    "            pm.expect(adminIdFromUrl, \"Tested admin ID\").to.be.a(\"string\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "d98f758e-2e9d-4a85-90e0-e671cf22e2ae",
            "name": "MEM - GET  Accounts CRITICAL QASM-TC-19",
            "request": {
              "url": {
                "path": [
                  "api",
                  "admin",
                  ""
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "200b8a7e-0550-4f82-91a4-5067528aa859",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "    const response = pm.response.json();\r",
                    "    const adminCount = response.data.length;\r",
                    "    \r",
                    "    // Test principal avec le compte\r",
                    "    pm.test(`[SUCCESS] Admin list retrieved - Found ${adminCount} admins`, function() {\r",
                    "        pm.expect(response.success).to.be.true;\r",
                    "    });\r",
                    "    \r",
                    "    // Sous-tests pour les validations\r",
                    "    pm.test(\"Data structure validation\", function() {\r",
                    "        pm.expect(response.data).to.be.an(\"array\");\r",
                    "        \r",
                    "        const adminSchema = {\r",
                    "            /* ... même schéma que précédemment ... */\r",
                    "        };\r",
                    "        \r",
                    "        response.data.forEach(admin => {\r",
                    "            pm.expect(admin).to.have.jsonSchema(adminSchema);\r",
                    "        });\r",
                    "    });\r",
                    "    \r",
                    "    break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] No admins found\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Liste d'admins introuvable !\");\r",
                    "            \r",
                    "            // Ce cas ne devrait normalement pas se produire (find() retourne [])\r",
                    "            console.log(\"La liste d'admins est vide ou introuvable\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR] Server failure\", function() {\r",
                    "            pm.expect(pm.response.json()).to.deep.equal({\r",
                    "                success: false,\r",
                    "                message: \"Echec serveur\"\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{token}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d49b7d0c-7328-44f6-a48f-e59f30446f6d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e57363d9-03a0-45b1-831e-cf6a7ca505ef",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0e728904-0ea1-47b3-8af0-dbf45745691d",
        "name": "Wedding",
        "item": [
          {
            "id": "b32f1c9d-4644-42b8-a8ad-9696ace2b928",
            "name": "MEM - GET View wedding CRITICAL QASM-TC-20",
            "request": {
              "url": {
                "path": [
                  "api",
                  "wedding",
                  "{{mariageId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "urlencoded",
                "urlencoded": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d58656dd-5f60-4823-813e-a5423b237e16",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Wedding data loaded\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            const mariageId = pm.variables.get(\"mariageId\"); // Utilisation de la bonne variable\r",
                    "            \r",
                    "            // Vérification de base\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            pm.expect(response.data._id.toString()).to.equal(mariageId.toString());\r",
                    "            \r",
                    "            // Validation contre le schéma\r",
                    "            pm.test(\"Data matches wedding schema\", function() {\r",
                    "                // Schéma basé sur votre modèle\r",
                    "                const weddingSchema = {\r",
                    "                    type: \"object\",\r",
                    "                    properties: {\r",
                    "                        _id: { type: \"string\" },\r",
                    "                        firstPerson: { \r",
                    "                            type: \"string\",\r",
                    "                            maxLength: 100\r",
                    "                        },\r",
                    "                        secondPerson: { \r",
                    "                            type: \"string\",\r",
                    "                            maxLength: 100 \r",
                    "                        },\r",
                    "                        tableID: {\r",
                    "                            type: \"array\",\r",
                    "                            items: { type: \"string\" } // IDs des tables\r",
                    "                        },\r",
                    "                        todoListID: {\r",
                    "                            type: \"array\",\r",
                    "                            items: { type: \"string\" } // IDs des todo lists\r",
                    "                        }\r",
                    "                    },\r",
                    "                    required: [\"_id\", \"firstPerson\", \"secondPerson\"]\r",
                    "                };\r",
                    "                \r",
                    "                pm.expect(response.data).to.have.jsonSchema(weddingSchema);\r",
                    "            });\r",
                    "            \r",
                    "            // Vérification des longueurs maximales\r",
                    "            pm.test(\"Field length validation\", function() {\r",
                    "                pm.expect(response.data.firstPerson.length).to.be.at.most(100);\r",
                    "                pm.expect(response.data.secondPerson.length).to.be.at.most(100);\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Wedding not found\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response).to.deep.equal({\r",
                    "                success: false,\r",
                    "                message: \"Impossible de charger les données du mariage\"\r",
                    "            });\r",
                    "            \r",
                    "            // Debug info\r",
                    "            const mariageId = pm.variables.get(\"mariageId\") || \"unknown\";\r",
                    "            console.log(`Tested wedding ID: ${mariageId}`);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR]\", function() {\r",
                    "            pm.expect(pm.response.json()).to.deep.equal({\r",
                    "                success: false,\r",
                    "                message: \"Echec serveur\"\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "a1ca5b40-b74b-4adf-9001-9a2e28cb6dc4",
            "name": "MEM - POST Update wedding CRITICAL QASM-TC-21",
            "request": {
              "url": {
                "path": [
                  "api",
                  "wedding",
                  "edit",
                  "{{mariageId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "firstPerson",
                    "value": "Marie-Paule"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fcbe0d9c-6dc6-4a2a-9541-d54933a19735",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\" || \"error\").that.is.a(\"string\");\r",
                    "});\r",
                    "\r",
                    "// Extraction de l'ID du mariage depuis les variables\r",
                    "const mariageId = pm.variables.get(\"mariageId\");\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Wedding updated successfully\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            \r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Modifications enregistrées\");\r",
                    "            \r",
                    "            // Optionnel : vérification des modifications\r",
                    "            if (pm.variables.get(\"verifyChanges\")) {\r",
                    "                pm.sendRequest({\r",
                    "                    url: pm.request.url.toString().replace(\"/update\", \"\"),\r",
                    "                    method: \"GET\"\r",
                    "                }, function(err, res) {\r",
                    "                    const updatedWedding = res.json().data;\r",
                    "                    const requestBody = JSON.parse(pm.request.body.raw);\r",
                    "                    \r",
                    "                    Object.keys(requestBody).forEach(key => {\r",
                    "                        pm.expect(updatedWedding[key]).to.deep.equal(requestBody[key]);\r",
                    "                    });\r",
                    "                });\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[BAD REQUEST] Update failed\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            \r",
                    "            // Vérification du type d'erreur 400\r",
                    "            pm.expect(jsonData.message).to.be.oneOf([\r",
                    "                \"Oups, une erreur s'est produite. Les données n'ont pas été sauvegardées\",\r",
                    "                \"Erreur serveur\"\r",
                    "            ]);\r",
                    "            \r",
                    "            // Message debug supplémentaire\r",
                    "            if (jsonData.message.includes(\"Oups\")) {\r",
                    "                console.log(\"Aucune modification détectée (nModified: 0)\");\r",
                    "            } else {\r",
                    "                console.log(\"Erreur de validation ou serveur\");\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Wedding not found\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.error).to.equal(\"Informations du mariage introuvables\");\r",
                    "            pm.expect.fail(`Mariage ID ${mariageId} introuvable`);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{token}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfbfdc9f-9860-49f5-9478-7cc5e2dfe2da",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e20d6db-296e-4901-a73d-267b7734e2d8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fd166881-56b6-4837-bea2-c2fd7c66f7aa",
        "name": "Table",
        "item": [
          {
            "id": "798e646f-2c2c-4525-a98e-5cb0518e67b9",
            "name": "MEM - POST Add table CRITICAL QASM-TC-22",
            "request": {
              "url": {
                "path": [
                  "api",
                  "tables",
                  "add"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "X-API-Key",
                  "value": "AioAuth MDBkM2UwMGQtZTUzNi0zZTA2LWE1MTQtNTRjMzk1NzMxNGEzLjkxMjYyZDQzLWY0YTMtNDFlZC1iNGM1LTNjZDE3OGYyZGRiNQ=="
                }
              ],
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "name",
                    "value": "Ancien travail"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "13be2aab-d727-4abe-bb3c-058f1179ccef",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Status 200 - Table created\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            \r",
                    "            // Validation de base\r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.data).to.be.an(\"object\");\r",
                    "            \r",
                    "            // Vérification des champs obligatoires\r",
                    "            pm.expect(jsonData.data).to.have.property(\"_id\");\r",
                    "            pm.expect(jsonData.data).to.have.property(\"mariageID\");\r",
                    "            pm.expect(jsonData.data).to.have.property(\"name\");\r",
                    "            \r",
                    "            // Vérification des champs du body\r",
                    "            try {\r",
                    "                const requestBody = JSON.parse(pm.request.body.raw);\r",
                    "                Object.keys(requestBody).forEach(key => {\r",
                    "                    pm.expect(jsonData.data).to.have.property(key, requestBody[key]);\r",
                    "                });\r",
                    "            } catch (e) {\r",
                    "                console.log(\"No valid request body to compare\");\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // CONFLIT DE NOM\r",
                    "        pm.test(\"[CONFLICT] Status 400 - Duplicate table name\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Une table avec le même nom existe déjà.\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // ERREUR SERVEUR\r",
                    "        pm.test(\"[SERVER ERROR] Status 500 - Creation failed\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Une erreur s'est produite lors de la création de la table.\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code} - Unhandled case`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "7551eaa9-bbfa-4471-b7f9-e2b3a32d77a3",
            "name": "MEM - POST Update table CRITICAL QASM-TC-23",
            "request": {
              "url": {
                "path": [
                  "api",
                  "tables",
                  "edit",
                  "{{tableId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "name",
                    "value": "Famille HOP"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ab802d30-93d9-4b6d-aa01-79fdc463452c",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "});\r",
                    "\r",
                    "// Extraction de l'ID de la table depuis l'URL\r",
                    "const urlSegments = pm.request.url.path;\r",
                    "const tableIdFromUrl = urlSegments[urlSegments.length - 1];\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Status 200 - Table updated\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.message).to.equal(\"La table a bien été modifiée\");\r",
                    "            \r",
                    "            // Optionnel : vérifier que le nom a bien changé\r",
                    "            if (pm.variables.get(\"expectedNewName\")) {\r",
                    "                pm.sendRequest({\r",
                    "                    url: pm.request.url,\r",
                    "                    method: \"GET\"\r",
                    "                }, (err, res) => {\r",
                    "                    pm.expect(res.json().data.name).to.equal(pm.variables.get(\"expectedNewName\"));\r",
                    "                });\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 204: // NO CONTENT (pas de changement)\r",
                    "        pm.test(\"[NO CHANGE] Status 204 - Same name\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"La valeur indiquée reste inchangée\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAIL] Status 400\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.be.oneOf([\r",
                    "                \"Le champ ne peut être vide\",\r",
                    "                \"Echec de la modification de la table\"\r",
                    "            ]);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Status 404\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Table introuvable !\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR] Status 500\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Echec serveur\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "4248c81e-27cd-4f22-b7aa-76699bcc37da",
            "name": "MEM - DELETE Delete table CRITICAL QASM-TC-24",
            "request": {
              "url": {
                "path": [
                  "api",
                  "tables",
                  "delete",
                  "{{tableId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "urlencoded",
                "urlencoded": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1aa56156-9b0f-4e20-a2e8-f185c62dd25a",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "});\r",
                    "\r",
                    "// Extraction de l'ID de la table depuis l'URL\r",
                    "const urlSegments = pm.request.url.path;\r",
                    "const tableIdFromUrl = urlSegments[urlSegments.length - 1];\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Status 200 - Table deleted\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.message).to.equal(\"La table a bien été supprimée\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAIL] Status 400 - Deletion error\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.be.oneOf([\r",
                    "                \"Oups, une erreur s'est produite lors de la modification des paramètres du mariage\",\r",
                    "                \"Oups, une erreur s'est produite lors de la suppression du la table\",\r",
                    "                \"Oups, une erreur s'est produite lors de la modification des paramètres invités\"\r",
                    "            ]);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Status 404\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.be.oneOf([\r",
                    "                \"La table que vous souhaitez supprimer n'existe pas\",\r",
                    "                \"Le mariage associé à ce compte n'existe pas\"\r",
                    "            ]);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR] Status 500\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Echec serveur\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "ba50203e-eff0-429e-873a-62dd9f3faeb1",
            "name": "MEM - GET View table CRITICAL QASM-TC-25",
            "request": {
              "url": {
                "path": [
                  "api",
                  "tables",
                  "681492e88326910078e5a2f9"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f9c7e2c9-ab74-4d64-855a-63c2dc6f5a18",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Extraire l'ID de la table depuis l'URL\r",
                    "const urlParts = pm.request.url.path;\r",
                    "const tableIdFromUrl = urlParts[urlParts.length - 1];\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Status 200 - Table found\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            \r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.data).to.be.an(\"object\");\r",
                    "            \r",
                    "            // Vérification des champs obligatoires\r",
                    "            pm.expect(jsonData.data).to.have.property(\"_id\");\r",
                    "            pm.expect(jsonData.data).to.have.property(\"name\");\r",
                    "            pm.expect(jsonData.data).to.have.property(\"mariageID\");\r",
                    "            \r",
                    "            // Vérification que l'ID correspond à celui demandé\r",
                    "            pm.expect(jsonData.data._id).to.equal(tableIdFromUrl);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Status 404 - Table doesn't exist\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Table introuvable !\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR] Status 500 - Server failure\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Echec serveur\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "3b1cb239-2256-4e0f-aa76-d432af72ea1e",
            "name": "MEM - GET View tables CRITICAL QASM-TC-26",
            "request": {
              "url": {
                "path": [
                  "api",
                  "tables"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bbaee60d-8731-4e7a-970f-a509099c8660",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Status 200 - Tables found\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            \r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.data).to.be.an(\"array\");\r",
                    "            \r",
                    "            // Vérification de la structure de chaque table\r",
                    "            jsonData.data.forEach(table => {\r",
                    "                pm.expect(table).to.have.property(\"_id\");\r",
                    "                pm.expect(table).to.have.property(\"name\");\r",
                    "                pm.expect(table).to.have.property(\"mariageID\");\r",
                    "                \r",
                    "                // Optionnel: vérifier que le mariageID correspond à celui attendu\r",
                    "                if (pm.variables.get(\"expectedMariageID\")) {\r",
                    "                    pm.expect(table.mariageID).to.equal(pm.variables.get(\"expectedMariageID\"));\r",
                    "                }\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Status 404 - No tables found\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Tables introuvables !\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR] Status 500 - Server failure\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Echec serveur\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "4b6699f6-ca5a-4a3a-a858-0775222b7cef",
            "name": "MEM - POST Update table with guests CRITICAL QASM-TC-27",
            "request": {
              "url": {
                "path": [
                  "api",
                  "guests",
                  "addtable",
                  "{{tableId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"guestIds\": [],\r\n  \"tableID\": \"65981d65cac83f004d989caf\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9f1e68d2-b60b-4683-9850-56578d236b83",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    \r",
                    "    if (!jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"statusCode\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Extraction de l'ID de la table depuis l'URL\r",
                    "const urlSegments = pm.request.url.path;\r",
                    "const tableIdFromUrl = urlSegments[urlSegments.length - 1];\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Status 200 - Guests updated\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.message).to.equal(\"La liste des invités a bien été modifiée\");\r",
                    "            \r",
                    "            // Optionnel : vérification côté base de données\r",
                    "            if (pm.variables.get(\"verifyChanges\")) {\r",
                    "                pm.sendRequest({\r",
                    "                    url: `${pm.environment.get(\"API_URL\")}/tables/${tableIdFromUrl}`,\r",
                    "                    method: \"GET\"\r",
                    "                }, (err, res) => {\r",
                    "                    const response = res.json();\r",
                    "                    const expectedGuestIds = JSON.parse(pm.request.body.raw).guestIds;\r",
                    "                    pm.expect(response.data.guestID).to.have.members(expectedGuestIds);\r",
                    "                });\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST (guests already on other table)\r",
                    "        pm.test(\"[CONFLICT] Guests on other table\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.include(\"sont déjà installés sur une autre table\");\r",
                    "            pm.expect(jsonData.statusCode).to.equal(400);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    // Tests pour le cas 404 - NOT FOUND\r",
                    "case 404:\r",
                    "    const { message } = pm.response.json();\r",
                    "    \r",
                    "    if (message === \"Table introuvable !\") {\r",
                    "        pm.test(\"404 - La table spécifiée n'existe pas\", function() {\r",
                    "            pm.expect(message).to.equal(\"Table introuvable !\");\r",
                    "        });\r",
                    "    }\r",
                    "    else {\r",
                    "        const idsExtraction = message.match(/IDs suivants sont introuvables: (.+)$/);\r",
                    "        const notFoundIds = idsExtraction ? idsExtraction[1] : 'non détectés';\r",
                    "        \r",
                    "        pm.test(`404 - Invités introuvables (IDs: ${notFoundIds})`, function() {\r",
                    "            pm.expect(message).to.include(\"invités avec les IDs suivants sont introuvables\");\r",
                    "            // Forcer l'affichage des IDs dans l'assertion\r",
                    "            pm.expect(notFoundIds, \"IDs concernés\").to.not.equal('non détectés');\r",
                    "        });\r",
                    "    }\r",
                    "    break;\r",
                    "        \r",
                    "    case 422: // UNPROCESSABLE ENTITY\r",
                    "        pm.test(\"[UPDATE FAILED] Table update error\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Echec de la modification de la table\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR]\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Echec serveur\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{token}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9ec6bbb-42d0-41a9-a190-c5e495dd31bd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53a1cc5c-80cf-4dd0-b7bc-06c040a76bd0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b7565031-57d1-4bc3-a78a-4ca24efdda09",
        "name": "Invité",
        "item": [
          {
            "id": "480cc1bd-f822-4bc4-9f3b-f509f336d722",
            "name": "MEM - POST Add guest CRITICAL QASM-TC-33",
            "request": {
              "url": {
                "path": [
                  "api",
                  "guests",
                  "add"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "X-API-Key",
                  "value": "AioAuth MDBkM2UwMGQtZTUzNi0zZTA2LWE1MTQtNTRjMzk1NzMxNGEzLjkxMjYyZDQzLWY0YTMtNDFlZC1iNGM1LTNjZDE3OGYyZGRiNQ=="
                }
              ],
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "name",
                    "value": "Patrick"
                  },
                  {
                    "key": "family",
                    "value": "1"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "48a3c1cc-a5b6-4faf-a307-b9175c089f4c",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Response has basic structure\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    \r",
                    "    // Vérification des champs obligatoires\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    // Le champ 'data' ou 'message' existe selon le cas\r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par statut HTTP\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Status is 200\", function() {\r",
                    "            pm.expect(pm.response.code).to.equal(200);\r",
                    "        });\r",
                    "        \r",
                    "        pm.test(\"[SUCCESS] Guest created successfully\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            \r",
                    "            // Validation de la structure du guest créé\r",
                    "            pm.expect(jsonData.data).to.have.property(\"_id\");\r",
                    "            pm.expect(jsonData.data).to.have.property(\"mariageID\", jsonData.data.mariageID);\r",
                    "            pm.expect(jsonData.data).to.have.property(\"tableID\", null);\r",
                    "            pm.expect(jsonData.data).to.have.property(\"media\", \"\");\r",
                    "            \r",
                    "            // Vérification des champs du body\r",
                    "             try {\r",
                    "                const requestBody = pm.request.body ? JSON.parse(pm.request.body.raw) : {};\r",
                    "                Object.keys(requestBody).forEach(key => {\r",
                    "                    if (key !== \"media\" && key !== \"tableID\") { // Ignore les champs écrasés\r",
                    "                        pm.expect(jsonData.data).to.have.property(key, requestBody[key]);\r",
                    "                    }\r",
                    "                });\r",
                    "            } catch (e) {\r",
                    "                console.log(\"No valid request body to compare\");\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAIL] Status is 400\", function() {\r",
                    "            pm.expect(pm.response.code).to.equal(400);\r",
                    "        });\r",
                    "        \r",
                    "        pm.test(\"[FAIL] Failed to create a new guest\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Erreur serveur\");\r",
                    "            pm.expect(jsonData).to.not.have.property(\"data\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 401: // UNAUTHORIZED (si middleware d'authentification échoue)\r",
                    "        pm.test(\"[AUTH ERROR] Status is 401\", function() {\r",
                    "            pm.expect(pm.response.code).to.equal(401);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(\"[UNEXPECTED] Unexpected status code: \" + pm.response.code, function() {\r",
                    "            pm.expect.fail(\"Received unexpected status: \" + pm.response.code);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "949f2101-6f05-4f77-b22c-5e5ed34ad3a9",
            "name": "Update avatar",
            "request": {
              "url": {
                "port": "3050",
                "path": [
                  "api",
                  "admin",
                  "guests",
                  "edit",
                  "65b3a614503b2a2ed0f761ec"
                ],
                "host": [
                  "localhost"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "groupID",
                    "value": "5ebe7769e30e9728a09205aa"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "media",
                    "type": "file",
                    "src": "/C:/Users/dalin/Pictures/Drake-1024x750.png"
                  },
                  {
                    "key": "name",
                    "value": "Bernard",
                    "type": "text"
                  }
                ]
              }
            },
            "response": [],
            "event": []
          },
          {
            "id": "8a99f35d-23d8-481b-a34e-e1c0f87246ab",
            "name": "MEM - DELETE Delete guest CRITICAL QASM-TC-35",
            "request": {
              "url": {
                "path": [
                  "api",
                  "guests",
                  "delete",
                  "{{guestId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "id",
                    "value": "5efb7e6ffe5f7f3beca6074c"
                  },
                  {
                    "disabled": true,
                    "key": "guestID",
                    "value": "5efb7e05fe5f7f3beca60746"
                  }
                ],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "59bfac8d-8623-4512-a0f0-b903779f1695",
                  "type": "text/javascript",
                  "exec": [
                    "// Common tests for all responses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "});\r",
                    "\r",
                    "// Extract guest ID from URL\r",
                    "const urlSegments = pm.request.url.path;\r",
                    "const guestIdFromUrl = urlSegments[urlSegments.length - 1];\r",
                    "\r",
                    "// Scenario-specific tests\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Guest successfully deleted\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.message).to.equal(\"L'invité a bien été supprimé\");\r",
                    "            \r",
                    "            // Optional: Verify deletion by attempting to fetch the guest\r",
                    "            pm.sendRequest({\r",
                    "                url: pm.request.url, // Reuse the same URL\r",
                    "                method: \"GET\"\r",
                    "            }, function(err, res) {\r",
                    "                pm.expect(res.code).to.equal(404);\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "    pm.test(\"[NOT FOUND] Guest not found - Deletion failed\", function() {\r",
                    "        const jsonData = pm.response.json();\r",
                    "        pm.expect(jsonData.success).to.be.false;\r",
                    "        \r",
                    "        // Premier test : vérifie juste que c'est bien une erreur 404 attendue\r",
                    "        pm.expect(jsonData.message).to.be.oneOf([\r",
                    "            \"Invité introuvable !\",\r",
                    "            \"Echec lors de la suppression de l'invité\"\r",
                    "        ]);\r",
                    "        \r",
                    "        // Deuxième test (informative seulement, ne fait pas échouer le test)\r",
                    "        if (jsonData.message === \"Invité introuvable !\") {\r",
                    "            console.log(`Info: Guest ${guestIdFromUrl} was not found (expected behavior)`);\r",
                    "        } else {\r",
                    "            console.log(`Info: Deletion failed for guest ${guestIdFromUrl}`);\r",
                    "        }\r",
                    "    });\r",
                    "    break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR] Server error during deletion\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Echec serveur\");\r",
                    "            \r",
                    "            // Additional debug info for CI/CD\r",
                    "            if (guestIdFromUrl.match(/^[0-9a-fA-F]{24}$/) === null) {\r",
                    "                pm.expect.fail(`The ID ${guestIdFromUrl} appears to be invalid (expected MongoDB format)`);\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "d292fa6f-acd0-40dd-9832-ce84aa501f01",
            "name": "MEM - GET View guest CRITICAL QASM-TC-36",
            "request": {
              "url": {
                "path": [
                  "api",
                  "guests",
                  "id",
                  "{{guestId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7996bda4-44e4-4caa-9cc5-1b8afa238994",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Extraction de l'ID de l'invité depuis l'URL\r",
                    "const urlSegments = pm.request.url.path;\r",
                    "const guestIdFromUrl = urlSegments[urlSegments.length - 1];\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(`[SUCCESS] Status 200 - Guest found (ID: ${guestIdFromUrl})`, function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            \r",
                    "            pm.expect(jsonData.success).to.be.true;\r",
                    "            pm.expect(jsonData.data).to.be.an(\"object\");\r",
                    "            \r",
                    "            // Vérification des champs obligatoires\r",
                    "            pm.expect(jsonData.data).to.have.property(\"_id\", guestIdFromUrl);\r",
                    "            pm.expect(jsonData.data).to.have.property(\"tableID\");\r",
                    "            \r",
                    "            // Vérification du populate de la table\r",
                    "            if (jsonData.data.tableID) {\r",
                    "                pm.expect(jsonData.data.tableID).to.have.property(\"name\").that.is.a(\"string\");\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Status 404 - Guest not found\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Invité introuvable\");\r",
                    "            \r",
                    "            // Affichage explicite de l'ID recherché\r",
                    "            pm.expect.fail(`L'invité avec l'ID ${guestIdFromUrl} n'a pas été trouvé`);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[BAD REQUEST] Status 400 - Invalid request\", function() {\r",
                    "            const jsonData = pm.response.json();\r",
                    "            pm.expect(jsonData.success).to.be.false;\r",
                    "            pm.expect(jsonData.message).to.equal(\"Erreur serveur\");\r",
                    "            \r",
                    "            // Affichage supplémentaire pour debug\r",
                    "            if (guestIdFromUrl.match(/^[0-9a-fA-F]{24}$/) === null) {\r",
                    "                pm.expect.fail(`L'ID ${guestIdFromUrl} semble invalide (format MongoDB attendu)`);\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Statut inattendu : ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "56899f7a-fc60-4cf6-a76d-6a56ae0d4996",
            "name": "MEM - GET View guests CRITICAL QASM-TC-37",
            "request": {
              "url": {
                "path": [
                  "api",
                  "guests",
                  ""
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "urlencoded",
                "urlencoded": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7988ca5e-6c34-44da-8509-4679e1a334de",
                  "type": "text/javascript",
                  "exec": [
                    "// Common tests for all responses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Scenario-specific tests\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Status 200 - Valid guests list\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            \r",
                    "            // 1. Basic structure validation\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            pm.expect(response.data).to.be.an(\"array\");\r",
                    "            \r",
                    "            // 2. Guest validation\r",
                    "            response.data.forEach(guest => {\r",
                    "                // Mandatory mariageID check\r",
                    "                pm.expect(guest, \"A guest must always have a mariageID\").to.have.property(\"mariageID\");\r",
                    "                \r",
                    "                // Verify mariageID is a non-empty string\r",
                    "                pm.expect(guest.mariageID, \"mariageID must be a valid ID\")\r",
                    "                  .to.be.a(\"string\")\r",
                    "                  .and.to.match(/^[0-9a-fA-F]{24}$/); // MongoDB format\r",
                    "                \r",
                    "                // Other mandatory properties\r",
                    "                pm.expect(guest).to.have.property(\"_id\").that.is.a(\"string\");\r",
                    "                pm.expect(guest).to.have.property(\"name\").that.is.a(\"string\");\r",
                    "                \r",
                    "                // Optional: _id format validation\r",
                    "                pm.expect(guest._id).to.match(/^[0-9a-fA-F]{24}$/);\r",
                    "            });\r",
                    "            \r",
                    "            // 3. Informative message\r",
                    "            if (response.data.length > 0) {\r",
                    "                pm.expect(response.data.length, `Number of valid guests: ${response.data.length}`).to.be.greaterThan(0);\r",
                    "            } else {\r",
                    "                pm.expect.fail(\"No guests found despite receiving a 200 status\");\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] No guests found\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response).to.deep.equal({\r",
                    "                success: false,\r",
                    "                message: \"Invités introuvables !\"\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR] Server error\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response).to.deep.equal({\r",
                    "                success: false,\r",
                    "                message: \"Echec serveur\"\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "fd73b9d8-f324-4cdb-b557-31165edf3ae4",
            "name": "Afficher l'avatar de l'invité",
            "request": {
              "url": {
                "port": "3050",
                "path": [
                  "api",
                  "admin",
                  "guests",
                  "media",
                  "eae5c6145d4b3db38caeed7871cc4175.jpeg"
                ],
                "host": [
                  "localhost"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwNzEyYzE3N2I2MzM1MzJiYzllNDVhYyIsIm1hcmlhZ2VJRCI6IjYwNzEyYzE3N2I2MzM1MzJiYzllNDVhYiIsInJvbGUiOiJhZG1pbiIsImludml0YXRpb25JRCI6IjYwNzEyYzE3N2I2MzM1MzJiYzllNDVhZSIsImlhdCI6MTYxODYyMzgxMX0.9aLTIh0QJWFj_anD7Jd_KYRppKGPOIKzUYXrha0RFQ4",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{token}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6b4e51f-bb8f-4f91-9741-4e323271ae44",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89edcd3d-2754-472a-a7be-561e2337cc02",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "101cac57-704a-4e53-b0b8-b47f4d962ac4",
        "name": "Expenses",
        "item": [
          {
            "id": "d060e306-e373-4610-97e1-b8bf804c0b2a",
            "name": "MEM - POST Add expense HIGH QASM-TC-67",
            "request": {
              "url": {
                "path": [
                  "api",
                  "budget",
                  "operations",
                  "add"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "category",
                    "value": "Locations"
                  },
                  {
                    "key": "price",
                    "value": "700"
                  },
                  {
                    "key": "description",
                    "value": "Location de smoking"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "21f46c1c-f892-45ec-8958-02115a01446a",
                  "type": "text/javascript",
                  "exec": [
                    "// Common tests for all responses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Scenario-specific tests\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Operation created successfully\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                    "            \r",
                    "            // 1. Basic response validation\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            pm.expect(response.data).to.be.an(\"object\");\r",
                    "            \r",
                    "            // 2. Price conversion verification (x100)\r",
                    "            if (requestBody.price) {\r",
                    "                const expectedPrice = requestBody.price * 100;\r",
                    "                pm.expect(response.data.price).to.equal(expectedPrice);\r",
                    "                pm.test(`Price converted: ${requestBody.price} → ${expectedPrice}`, () => true);\r",
                    "                \r",
                    "                // Validate price meets schema requirements\r",
                    "                pm.expect(response.data.price).to.be.at.least(1);\r",
                    "                pm.expect(response.data.price).to.be.at.most(99999900); // Accounting for x100 conversion\r",
                    "            }\r",
                    "            \r",
                    "            // 3. Full schema validation\r",
                    "            const operationSchema = {\r",
                    "                type: \"object\",\r",
                    "                properties: {\r",
                    "                    _id: { type: \"string\" },\r",
                    "                    category: { \r",
                    "                        type: \"string\",\r",
                    "                        enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                    "                               \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                    "                               \"Faire-part\", \"Autres\"]\r",
                    "                    },\r",
                    "                    description: { \r",
                    "                        type: \"string\", \r",
                    "                        maxLength: 255 \r",
                    "                    },\r",
                    "                    price: { \r",
                    "                        type: \"number\",\r",
                    "                        minimum: 1,\r",
                    "                        maximum: 99999900 // After x100 conversion\r",
                    "                    },\r",
                    "                    date: { type: \"string\" },\r",
                    "                    mariageID: { type: \"string\" }\r",
                    "                },\r",
                    "                required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                    "            };\r",
                    "            pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                    "            \r",
                    "            \r",
                    "            // 4. Verify mariageID is correctly set\r",
                    "            if (pm.variables.get(\"mariageId\")) {\r",
                    "                pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                    "            }\r",
                    "            \r",
                    "            pm.test(`Operation created: ${JSON.stringify(response.data, null, 2)}`, () => true);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] Creation error\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.include(\"erreur\"); // Flexible error message check\r",
                    "            \r",
                    "            // Detailed validation error analysis\r",
                    "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                    "            \r",
                    "            if (!requestBody.description) {\r",
                    "                pm.test(\"Missing required field: description\", () => true);\r",
                    "            }\r",
                    "            \r",
                    "            if (requestBody.price !== undefined) {\r",
                    "                if (requestBody.price < 1) pm.test(\"Price below minimum (1)\", () => true);\r",
                    "                if (requestBody.price > 999999) pm.test(\"Price above maximum (999999)\", () => true);\r",
                    "            }\r",
                    "            \r",
                    "            if (requestBody.category && !operationSchema.properties.category.enum.includes(requestBody.category)) {\r",
                    "                pm.test(`Invalid category: ${requestBody.category}`, () => true);\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                    "        });\r",
                    "}\r",
                    "\r",
                    "// Quality of service tests\r",
                    "// pm.test(\"Response time is reasonable (<500ms)\", function() {\r",
                    "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "// });\r",
                    "\r",
                    "// pm.test(\"Correct content type header\", function() {\r",
                    "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                    "// });"
                  ],
                  "_lastExecutionId": "0b3356c9-2954-4a3d-a72a-09b9c4a8ac03"
                }
              }
            ]
          },
          {
            "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
            "name": "MEM - GET Expense HIGH QASM-TC-68",
            "request": {
              "url": {
                "path": [
                  "api",
                  "budget",
                  "operation",
                  "{{expenseId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                  "type": "text/javascript",
                  "exec": [
                    "// Common tests for all responses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                    "            return data === null || typeof data === \"object\";\r",
                    "        });\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Scenario-specific tests\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            \r",
                    "            // 1. Basic response validation\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            \r",
                    "            // 2. Handle both found and not-found cases\r",
                    "            if (response.data !== null) {\r",
                    "                // 3. Complete schema validation\r",
                    "                const operationSchema = {\r",
                    "                    type: \"object\",\r",
                    "                    properties: {\r",
                    "                        _id: { type: \"string\" },\r",
                    "                        category: { \r",
                    "                            type: \"string\",\r",
                    "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                    "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                    "                                   \"Faire-part\", \"Autres\"]\r",
                    "                        },\r",
                    "                        description: { \r",
                    "                            type: \"string\", \r",
                    "                            maxLength: 255 \r",
                    "                        },\r",
                    "                        price: { \r",
                    "                            type: \"number\",\r",
                    "                            minimum: 1,\r",
                    "                            maximum: 99999900\r",
                    "                        },\r",
                    "                        date: { type: \"string\" },\r",
                    "                        mariageID: { type: \"string\" }\r",
                    "                    },\r",
                    "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                    "                };\r",
                    "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                    "                \r",
                    "                // 4. Verify price format (should be stored as x100)\r",
                    "                if (response.data.price) {\r",
                    "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                    "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                    "                }\r",
                    "            } else {\r",
                    "                pm.test(\"Operation not found (null response)\", () => true);\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                    "        });\r",
                    "}\r",
                    "\r",
                    "// Quality of service tests\r",
                    "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                    "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                    "// });\r",
                    "\r",
                    "// pm.test(\"Correct content type header\", function() {\r",
                    "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                    "// });\r",
                    "\r",
                    "// Environment validation\r",
                    "// pm.test(\"Requested ID is valid format\", function() {\r",
                    "//     const requestedId = pm.request.url.split('/').pop();\r",
                    "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                    "// });"
                  ],
                  "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
                }
              }
            ]
          },
          {
            "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
            "name": "MEM - POST Edit expense HIGH QASM-TC-69",
            "request": {
              "url": {
                "path": [
                  "api",
                  "budget",
                  "operations",
                  "edit",
                  "{{expenseId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "title",
                    "value": "Blablabla"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                  "type": "text/javascript",
                  "exec": [
                    "// 1. BASIC RESPONSE STRUCTURE\r",
                    "pm.test(\"Response has valid structure\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                    "});\r",
                    "\r",
                    "// 2. SCENARIO HANDLING (request handling)\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                    "            pm.expect(pm.response.json()).to.deep.equal({\r",
                    "                success: true,\r",
                    "                message: \"Modification enregistrée\"\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // VALIDATION ERROR\r",
                    "        const errorCases = {\r",
                    "            \"invalid_fields\": {\r",
                    "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                    "                test: () => {\r",
                    "                    pm.expect(pm.response.json().err)\r",
                    "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                    "                }\r",
                    "            },\r",
                    "            \"update_failed\": {\r",
                    "                description: \"should handle update failure\",\r",
                    "                test: () => {\r",
                    "                    pm.expect(pm.response.json().message)\r",
                    "                      .to.include(\"erreur s'est produite\");\r",
                    "                }\r",
                    "            }\r",
                    "        };\r",
                    "        \r",
                    "        // Determine error type based on request\r",
                    "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                    "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                    "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                    "        \r",
                    "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                    "                                       : errorCases.update_failed.description}`, \r",
                    "                isTypeError ? errorCases.invalid_fields.test \r",
                    "                           : errorCases.update_failed.test);\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                    "            pm.expect(pm.response.json()).to.deep.equal({\r",
                    "                success: false,\r",
                    "                message: \"L'opération n'existe pas.\"\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                    "        });\r",
                    "}\r",
                    "\r",
                    "// 3. QUALITY CHECKS (for all responses)\r",
                    "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                    "// pm.test(\"Has JSON content-type\", () => {\r",
                    "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                    "// });"
                  ],
                  "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
                }
              }
            ]
          },
          {
            "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
            "name": "MEM - DELETE Expense HIGH QASM-TC-70",
            "request": {
              "url": {
                "path": [
                  "api",
                  "budget",
                  "operations",
                  "delete",
                  "{{expenseId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                  "type": "text/javascript",
                  "exec": [
                    "// 1. BASIC RESPONSE VALIDATION\r",
                    "pm.test(\"Response structure is valid\", function() {\r",
                    "    const response = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "});\r",
                    "\r",
                    "// 2. SCENARIO-BASED TESTS\r",
                    "const response = pm.response.json();\r",
                    "const operationId = pm.request.url.toString().split('/').pop();\r",
                    "\r",
                    "switch(pm.response.code) {\r",
                    "    case 200:\r",
                    "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                    "            pm.expect(response).to.deep.equal({\r",
                    "                success: true,\r",
                    "                message: \"Opération suprimée\"\r",
                    "            });\r",
                    "            \r",
                    "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404:\r",
                    "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                    "            pm.expect(response).to.deep.equal({\r",
                    "                success: false,\r",
                    "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400:\r",
                    "        const errorMessages = {\r",
                    "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                    "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                    "        };\r",
                    "        \r",
                    "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                    "            \r",
                    "            if (response.message === errorMessages.deletion_failed) {\r",
                    "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                    "        });\r",
                    "}\r",
                    "\r",
                    "// 3. QUALITY CHECKS\r",
                    "// pm.test(\"Response time should be < 500ms\", function() {\r",
                    "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "// });\r",
                    "\r",
                    "// pm.test(\"Should have correct content-type\", function() {\r",
                    "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                    "//       .to.equal('application/json; charset=utf-8');\r",
                    "// });\r",
                    "\r",
                    "// 4. SECURITY CHECKS\r",
                    "// pm.test(\"Should require authentication\", function() {\r",
                    "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                    "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                    "//           .to.match(/^Bearer\\s.+/);\r",
                    "//     }\r",
                    "// });"
                  ],
                  "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
                }
              }
            ]
          },
          {
            "id": "1ec7f201-24c3-469d-87b8-50c6534065dd",
            "name": "MEM - GET All expenses HIGH QASM-TC-71",
            "request": {
              "url": {
                "path": [
                  "api",
                  "budget",
                  "operations",
                  ""
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fc7d6120-73a1-417b-860a-b17217ab623d",
                  "type": "text/javascript",
                  "exec": [
                    "// Common tests for all responses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Scenario-specific tests\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Operations retrieved successfully\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            \r",
                    "            // 1. Basic response validation\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            pm.expect(response.data).to.be.an(\"array\");\r",
                    "            \r",
                    "            // 2. Validate each operation in the array\r",
                    "            if (response.data.length > 0) {\r",
                    "                const operationSchema = {\r",
                    "                    type: \"object\",\r",
                    "                    properties: {\r",
                    "                        _id: { type: \"string\" },\r",
                    "                        category: { \r",
                    "                            type: \"string\",\r",
                    "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                    "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                    "                                   \"Faire-part\", \"Autres\"]\r",
                    "                        },\r",
                    "                        description: { \r",
                    "                            type: \"string\", \r",
                    "                            maxLength: 255 \r",
                    "                        },\r",
                    "                        price: { \r",
                    "                            type: \"number\",\r",
                    "                            minimum: 1,\r",
                    "                            maximum: 99999900 // accounting for x100 conversion\r",
                    "                        },\r",
                    "                        date: { type: \"string\" },\r",
                    "                        mariageID: { type: \"string\" }\r",
                    "                    },\r",
                    "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                    "                };\r",
                    "                \r",
                    "                response.data.forEach(operation => {\r",
                    "                    // 3. Validate against schema\r",
                    "                    pm.expect(operation).to.have.jsonSchema(operationSchema);\r",
                    "                    \r",
                    "                    // 4. Verify mariageID matches\r",
                    "                    if (pm.variables.get(\"mariageId\")) {\r",
                    "                        pm.expect(operation.mariageID.toString()).to.equal(\r",
                    "                            pm.variables.get(\"mariageId\").toString()\r",
                    "                        );\r",
                    "                    }\r",
                    "                    \r",
                    "                    // 5. Verify price format\r",
                    "                    if (operation.price) {\r",
                    "                        pm.expect(operation.price % 1).to.equal(0, \"Price should be stored as integer (cents)\");\r",
                    "                    }\r",
                    "                });\r",
                    "                \r",
                    "                pm.test(`Found ${response.data.length} operations`, () => true);\r",
                    "            } else {\r",
                    "                pm.test(\"Received empty operations array\", () => true);\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[FAILED] Operations not found\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Impossible de charger votre journal d'opérations\");\r",
                    "            \r",
                    "            // Verify this occurs when no operations exist for mariageID\r",
                    "            pm.test(\"Likely caused by no operations for this wedding\", () => true);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[FAILED] Server error\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                    "            \r",
                    "            // Verify this occurs on database errors\r",
                    "            pm.test(\"Likely caused by database connection issue\", () => true);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                    "        });\r",
                    "}\r",
                    "\r",
                    "// Quality of service tests\r",
                    "// pm.test(\"Response time is acceptable (<500ms)\", function() {\r",
                    "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                    "// });\r",
                    "\r",
                    "// pm.test(\"Correct content type header\", function() {\r",
                    "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                    "// });\r",
                    "\r",
                    "// Environment validation\r",
                    "// pm.test(\"Request has proper authorization\", function() {\r",
                    "//     pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
                    "// });"
                  ],
                  "_lastExecutionId": "76ba6919-c29f-46ce-91f8-921f0eb8d95f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{token}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25510c8d-6dab-4100-b88a-39dfc23b580f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff1eec73-6652-4216-ac8b-9cde928a7245"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a48baae-b0c7-40e7-9f78-a2fe007f2a89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68717734-1ec9-4230-ad28-793d573ace1d"
            }
          }
        ]
      },
      {
        "id": "0a86216d-5646-495f-9de4-d362e9dae269",
        "name": "Todolist",
        "item": [
          {
            "id": "8858dcb2-a2f3-4492-87b0-38210f33a403",
            "name": "MEM - POST Update task CRITICAL QASM-TC-72",
            "request": {
              "url": {
                "path": [
                  "api",
                  "todolist",
                  "edit",
                  "{{todoId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "text",
                    "value": "Changed value 3"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e014b8ac-1a4b-4ba5-a4d1-24d5ca106e00",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\" || \"data\").that.exist;\r",
                    "});\r",
                    "\r",
                    "// Extraction de l'ID depuis l'URL\r",
                    "const urlSegments = pm.request.url.path;\r",
                    "const todoIdFromUrl = urlSegments[urlSegments.length - 1];\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Task updated - Modification enregistrée\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                    "            \r",
                    "            // Vérification de base\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            \r",
                    "            // Selon la réponse (votre fonction a deux return 200 différents)\r",
                    "            if (response.message) {\r",
                    "                pm.expect(response.message).to.equal(\"Modification enregistrée\");\r",
                    "            } else if (response.data) {\r",
                    "                pm.test(\"Verify update result\", function() {\r",
                    "                    pm.expect(response.data.nModified).to.equal(1);\r",
                    "                });\r",
                    "            }\r",
                    "            \r",
                    "            // Optionnel : vérification des modifications\r",
                    "            if (pm.variables.get(\"verifyChanges\")) {\r",
                    "                pm.sendRequest({\r",
                    "                    url: pm.request.url,\r",
                    "                    method: \"GET\"\r",
                    "                }, function(err, res) {\r",
                    "                    const updatedTodo = res.json().data;\r",
                    "                    Object.keys(requestBody).forEach(key => {\r",
                    "                        pm.expect(updatedTodo[key]).to.deep.equal(requestBody[key]);\r",
                    "                    });\r",
                    "                });\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] \" + pm.response.json().message, function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.be.oneOf([\r",
                    "                \"Oups, une erreur s'est produite lors de la modification de la tâche.\",\r",
                    "                \"Oups, une erreur s'est produite lors de la mise à jour de la tâche\"\r",
                    "            ]);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Todo not found - Le tâche que vous cherchez n'existe pas\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Le tâche que vous cherchez n'existe pas\");\r",
                    "            pm.expect.fail(`Tâche ID ${todoIdFromUrl} introuvable`);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "3f45d509-2d96-4e88-bd69-941a063866fa",
            "name": "MEM - POST Create task CRITICAL QASM-TC-73",
            "request": {
              "url": {
                "path": [
                  "api",
                  "todolist",
                  "add"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "text",
                    "value": "Test"
                  },
                  {
                    "disabled": true,
                    "key": "color",
                    "value": "#bbcec3"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ea75579e-09bc-41f7-bb70-f5657358b212",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "    pm.test(\"[SUCCESS] Task created successfully\", function() {\r",
                    "        // 1. Vérifier que la réponse est un JSON valide\r",
                    "        const response = pm.response.json();\r",
                    "        const requestBody = JSON.parse(pm.request.body.raw || '{}'); // Gestion du body vide\r",
                    "        \r",
                    "        // 2. Vérification de base\r",
                    "        pm.expect(response.success).to.be.true;\r",
                    "        pm.expect(response.data).to.be.an(\"object\");\r",
                    "        \r",
                    "        // 3. Validation du schéma\r",
                    "        const todoSchema = {\r",
                    "            type: \"object\",\r",
                    "            properties: {\r",
                    "                _id: { type: \"string\" },\r",
                    "                text: { type: \"string\", minLength: 1 },\r",
                    "                isCompleted: { type: \"boolean\" },\r",
                    "                mariageID: { type: \"string\" }\r",
                    "            },\r",
                    "            required: [\"_id\", \"text\", \"mariageID\"]\r",
                    "        };\r",
                    "        pm.expect(response.data).to.have.jsonSchema(todoSchema);\r",
                    "        \r",
                    "        // 4. Vérification des données\r",
                    "        if (requestBody.text) {\r",
                    "            pm.expect(response.data.text).to.equal(requestBody.text);\r",
                    "            pm.test(`Tâche créée: \"${response.data.text}\"`, () => true); // Affichage clair\r",
                    "        }\r",
                    "        \r",
                    "        pm.expect(response.data.isCompleted).to.be.false;\r",
                    "        pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                    "    });\r",
                    "    break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] \" + pm.response.json().message, function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            \r",
                    "            // Vérification du type d'erreur\r",
                    "            pm.expect(response.message).to.be.oneOf([\r",
                    "                \"La valeur du champ ne peut pas être vide\",\r",
                    "                \"Oups, une erreur s'est produite lors de la création de la tâche\"\r",
                    "            ]);\r",
                    "            \r",
                    "            // Message supplémentaire pour le champ vide\r",
                    "            if (response.message === \"La valeur du champ ne peut pas être vide\") {\r",
                    "                pm.expect(JSON.parse(pm.request.body.raw)).to.not.have.property(\"text\");\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "0296ac58-96c5-4e5e-9461-789c7030414f",
            "name": "MEM - DELETE Delete task CRITICAL QASM-TC-74",
            "request": {
              "url": {
                "path": [
                  "api",
                  "todolist",
                  "delete",
                  "{{todoId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e78992d9-88b2-43ce-892e-8d93670a37dd",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\" || \"err\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Extraction de l'ID depuis l'URL\r",
                    "const urlSegments = pm.request.url.path;\r",
                    "const todoIdFromUrl = urlSegments[urlSegments.length - 1];\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Todo deleted - Tâche supprimée\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            \r",
                    "            // Vérification de base\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            pm.expect(response.message).to.equal(\"Tâche supprimée\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] \" + pm.response.json().message, function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            \r",
                    "            // Vérification du type d'erreur\r",
                    "            pm.expect(response.message).to.be.oneOf([\r",
                    "                \"Oups, le mariage n'a pas été mis à jour\",\r",
                    "                \"Oups, une erreur s'est produite lors de la suppression du la tâche\",\r",
                    "                \"Oups, une erreur s'est produite lors de la suppression de la tâche\"\r",
                    "            ]);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] Todo not found - \" + pm.response.json().err, function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.err).to.equal(\"Oups, la tâche que vous souhaitez supprimer n'existe pas\");\r",
                    "            pm.expect.fail(`Tâche ID ${todoIdFromUrl} introuvable`);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "c0e13d6f-0431-4aa2-ae12-86e5d3778c64",
            "name": "MEM - GET Todo list CRITICAL QASM-TC-75",
            "request": {
              "url": {
                "path": [
                  "api",
                  "todolist",
                  ""
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "urlencoded",
                "urlencoded": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "52a07275-da41-40f5-a092-9cedb6c02f1e",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Todos retrieved - Found \" + pm.response.json().data.length + \" tasks\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            const mariageId = pm.variables.get(\"mariageId\");\r",
                    "            \r",
                    "            // Vérification de base\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            pm.expect(response.data).to.be.an(\"array\");\r",
                    "            \r",
                    "            // Validation du schéma pour chaque todo\r",
                    "            const todoSchema = {\r",
                    "                type: \"object\",\r",
                    "                properties: {\r",
                    "                    _id: { type: \"string\" },\r",
                    "                    text: { \r",
                    "                        type: \"string\",\r",
                    "                        minLength: 1\r",
                    "                    },\r",
                    "                    isCompleted: { type: \"boolean\" },\r",
                    "                    mariageID: { type: \"string\" }\r",
                    "                },\r",
                    "                required: [\"_id\", \"text\", \"mariageID\"]\r",
                    "            };\r",
                    "            \r",
                    "            // Vérification de chaque tâche\r",
                    "            response.data.forEach(todo => {\r",
                    "                pm.expect(todo).to.have.jsonSchema(todoSchema);\r",
                    "                pm.expect(todo.mariageID.toString()).to.equal(mariageId.toString());\r",
                    "                \r",
                    "                // Vérification spécifique pour le texte\r",
                    "                if (todo.text) {\r",
                    "                    pm.expect(todo.text.trim().length, \"Le texte ne doit pas être vide\")\r",
                    "                      .to.be.greaterThan(0);\r",
                    "                }\r",
                    "            });\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[NOT FOUND] No todos found - Liste de tâche introuvable !\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Liste de tâche introuvable !\");\r",
                    "            \r",
                    "            // Note: find() retourne [] plutôt que null, ce cas ne devrait normalement pas se produire\r",
                    "            console.log(\"Mariage ID testé: \" + pm.variables.get(\"mariageId\"));\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 500: // SERVER ERROR\r",
                    "        pm.test(\"[SERVER ERROR] Server failure - Echec serveur\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                    "            \r",
                    "            // Debug pour IDs invalides\r",
                    "            if (pm.variables.get(\"mariageId\").match(/^[0-9a-fA-F]{24}$/) === null) {\r",
                    "                console.log(\"ID de mariage potentiellement invalide\");\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{token}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7741e62-f8a3-4d20-8563-08a400eee16c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20d4f590-16e8-40eb-b381-dc04b97ecb97",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2892c0f1-778f-40cc-8759-091f3b3554c0",
        "name": "Reception",
        "item": [
          {
            "id": "99f8ce61-1f32-4d83-8b10-c63812a9670f",
            "name": "MEM - GET Food CRITICAL QASM-TC-57",
            "request": {
              "url": {
                "path": [
                  "api",
                  "reception",
                  "food",
                  ""
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4d7f60fd-a688-47f3-a089-c0c126657afc",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        if (pm.response.json().success) {\r",
                    "            pm.test(\"[SUCCESS] Foods retrieved successfully\", function() {\r",
                    "                const response = pm.response.json();\r",
                    "                \r",
                    "                // Validation de base\r",
                    "                pm.expect(response.success).to.be.true;\r",
                    "                pm.expect(response.data).to.be.an(\"array\");\r",
                    "                \r",
                    "                // Schéma de validation pour chaque élément\r",
                    "                const foodSchema = {\r",
                    "                    type: \"object\",\r",
                    "                    properties: {\r",
                    "                        _id: { type: \"string\" },\r",
                    "                        name: { type: \"string\", minLength: 1 },\r",
                    "                        category: { \r",
                    "                            type: \"string\",\r",
                    "                            enum: [\"apetizer\", \"starter\", \"maincourse\", \"dessert\", \"beverage\"]\r",
                    "                        },\r",
                    "                        mariageID: { type: \"string\" }\r",
                    "                    },\r",
                    "                    required: [\"_id\", \"name\", \"category\", \"mariageID\"]\r",
                    "                };\r",
                    "                \r",
                    "                // Vérification de chaque élément du tableau\r",
                    "                response.data.forEach(food => {\r",
                    "                    pm.expect(food).to.have.jsonSchema(foodSchema);\r",
                    "                    \r",
                    "                    // Vérification du mariageID si variable disponible\r",
                    "                    if (pm.variables.get(\"mariageId\")) {\r",
                    "                        pm.expect(food.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                    "                    }\r",
                    "                });\r",
                    "                \r",
                    "                pm.test(`Found ${response.data.length} food items`, () => true);\r",
                    "            });\r",
                    "        } else {\r",
                    "            pm.test(\"[FAILED] Server error\", function() {\r",
                    "                const response = pm.response.json();\r",
                    "                pm.expect(response.success).to.be.false;\r",
                    "                pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                    "            });\r",
                    "        }\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[FAILED] No foods found\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Impossible de charger les boissons du menu\");\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "b9185e7f-d535-4a16-babc-5a485d81c2a1",
            "name": "MEM - POST Add Food HIGH QASM-TC-58",
            "request": {
              "url": {
                "path": [
                  "api",
                  "reception",
                  "food",
                  "add"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "name",
                    "value": "Gâteau au chocolat"
                  },
                  {
                    "key": "category",
                    "value": "dessert"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a55f0660-2498-447d-bb5d-9cdd13d61df2",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    if (jsonData.success) {\r",
                    "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Food created successfully\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                    "            \r",
                    "            // Validation de base\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            pm.expect(response.data).to.be.an(\"object\");\r",
                    "            \r",
                    "            // Schéma de validation\r",
                    "            const foodSchema = {\r",
                    "                type: \"object\",\r",
                    "                properties: {\r",
                    "                    _id: { type: \"string\" },\r",
                    "                    name: { type: \"string\", minLength: 1, maxLength: 100 },\r",
                    "                    category: { \r",
                    "                        type: \"string\",\r",
                    "                        enum: [\"apetizer\", \"starter\", \"maincourse\", \"dessert\", \"beverage\"]\r",
                    "                    },\r",
                    "                    mariageID: { type: \"string\" }\r",
                    "                },\r",
                    "                required: [\"_id\", \"name\", \"category\", \"mariageID\"]\r",
                    "            };\r",
                    "            pm.expect(response.data).to.have.jsonSchema(foodSchema);\r",
                    "            \r",
                    "            // Vérification des données\r",
                    "            if (requestBody.name) {\r",
                    "                pm.expect(response.data.name).to.equal(requestBody.name);\r",
                    "                pm.test(`Plat créé: \"${response.data.name}\" (${response.data.category})`, () => true);\r",
                    "            }\r",
                    "            \r",
                    "            // Vérification du mariageID\r",
                    "            if (pm.variables.get(\"mariageId\")) {\r",
                    "                pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] \" + pm.response.json().message, function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            \r",
                    "            // Vérification des messages d'erreur possibles\r",
                    "            pm.expect(response.message).to.be.oneOf([\r",
                    "                \"Catégorie invalide\",\r",
                    "                \"Veuilez compléter le champ\",\r",
                    "                \"Oups, l'élément n'a pas été créé...\"\r",
                    "            ]);\r",
                    "            \r",
                    "            // Détection spécifique des erreurs de validation\r",
                    "            if (response.message === \"Catégorie invalide\") {\r",
                    "                const requestBody = JSON.parse(pm.request.body.raw);\r",
                    "                pm.expect(requestBody.category).to.not.be.oneOf([\"apetizer\", \"starter\", \"maincourse\", \"dessert\", \"beverage\"]);\r",
                    "            }\r",
                    "            \r",
                    "            if (response.message === \"Veuilez compléter le champ\") {\r",
                    "                pm.expect(JSON.parse(pm.request.body.raw)).to.not.have.property(\"name\");\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "0656b9ad-ff22-406b-8034-8d788349e59d",
            "name": "MEM - POST Update food CRITICAL QASM-TC-59",
            "request": {
              "url": {
                "path": [
                  "api",
                  "reception",
                  "food",
                  "edit",
                  "{{foodId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "name",
                    "value": "Pondu"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "name",
                    "value": "Salade composée"
                  },
                  {
                    "key": "category",
                    "value": "starter"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1011f967-4c35-498d-bac0-bd69516541ef",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses (version corrigée)\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    \r",
                    "    // Correction : 'data' est optionnel dans votre implémentation\r",
                    "    if (jsonData.success) {\r",
                    "        if (jsonData.hasOwnProperty(\"data\")) {\r",
                    "            pm.expect(jsonData.data).to.be.an(\"object\");\r",
                    "        } else {\r",
                    "            pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "        }\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario (version corrigée)\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        if (pm.response.json().success) {\r",
                    "            pm.test(\"[SUCCESS] Food updated successfully\", function() {\r",
                    "                const response = pm.response.json();\r",
                    "                const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                    "                \r",
                    "                // Validation de base\r",
                    "                pm.expect(response.success).to.be.true;\r",
                    "                pm.expect(response.message).to.equal(\"Modification enregistrée\");\r",
                    "                \r",
                    "                // Correction : Utilisation de pm.request.url.toString()\r",
                    "                const urlParts = pm.request.url.toString().split('/');\r",
                    "                const foodId = urlParts[urlParts.length - 1];\r",
                    "                \r",
                    "                // Log utile avec l'ID\r",
                    "                pm.test(`Food ID ${foodId} updated`, () => true);\r",
                    "                \r",
                    "                // Vérification optionnelle des données\r",
                    "                if (response.data) {\r",
                    "                    pm.expect(response.data).to.be.an(\"object\");\r",
                    "                    pm.expect(response.data).to.have.property(\"nModified\", 1);\r",
                    "                }\r",
                    "            });\r",
                    "        } else {\r",
                    "            pm.test(\"[FAILED] Server error with 200 status\", function() {\r",
                    "                const response = pm.response.json();\r",
                    "                pm.expect(response.success).to.be.false;\r",
                    "                pm.expect(response.message).to.equal(\"Erreur serveur\");\r",
                    "            });\r",
                    "        }\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] Update error\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.be.oneOf([\r",
                    "                \"Oups, une erreur s'est produite lors de la modification de l'élément.\",\r",
                    "                \"Erreur serveur\"\r",
                    "            ]);\r",
                    "            \r",
                    "            // Vérification supplémentaire pour les échecs de modification\r",
                    "            if (response.message === \"Oups, une erreur s'est produite lors de la modification de l'élément.\") {\r",
                    "                const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                    "                pm.expect(requestBody).to.have.property(\"name\").or.have.property(\"category\");\r",
                    "            }\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[FAILED] Food not found\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"L'élément sélectionné n'existe pas\");\r",
                    "            \r",
                    "            // Correction : Utilisation de pm.request.url.toString()\r",
                    "            const urlParts = pm.request.url.toString().split('/');\r",
                    "            const foodId = urlParts[urlParts.length - 1];\r",
                    "            pm.expect(foodId).to.match(/^[0-9a-fA-F]{24}$/); // Validation format ID Mongo\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "d9fcf313-14a2-42ee-9266-a92a5e9f50b3",
            "name": "MEM - DELETE Food CRITICAL QASM-TC-60",
            "request": {
              "url": {
                "path": [
                  "api",
                  "reception",
                  "food",
                  "delete",
                  "{{foodId}}"
                ],
                "host": [
                  "{{apiURL}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "98976598-089b-44f2-84d8-1ed3e202c979",
                  "type": "text/javascript",
                  "exec": [
                    "// Tests communs à toutes les réponses\r",
                    "pm.test(\"Basic response structure is valid\", function() {\r",
                    "    const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    \r",
                    "    // La propriété 'data' est optionnelle et non utilisée dans cette implémentation\r",
                    "});\r",
                    "\r",
                    "// Tests spécifiques par scénario\r",
                    "switch(pm.response.code) {\r",
                    "    case 200: // SUCCESS\r",
                    "        pm.test(\"[SUCCESS] Food deleted successfully\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            \r",
                    "            // Validation de base\r",
                    "            pm.expect(response.success).to.be.true;\r",
                    "            pm.expect(response.message).to.equal(\"Element supprimé\");\r",
                    "            \r",
                    "            // Extraction de l'ID depuis l'URL\r",
                    "            const urlParts = pm.request.url.toString().split('/');\r",
                    "            const foodId = urlParts[urlParts.length - 1];\r",
                    "            \r",
                    "            // Log utile\r",
                    "            pm.test(`Food ID ${foodId} deleted`, () => true);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 400: // BAD REQUEST\r",
                    "        pm.test(\"[FAILED] Delete error\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la suppression de l'élément\");\r",
                    "            \r",
                    "            // Vérification que l'ID est bien dans l'URL\r",
                    "            const foodId = pm.request.url.toString().split('/').pop();\r",
                    "            pm.expect(foodId).to.match(/^[0-9a-fA-F]{24}$/); // Validation format ID Mongo\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    case 404: // NOT FOUND\r",
                    "        pm.test(\"[FAILED] Food not found\", function() {\r",
                    "            const response = pm.response.json();\r",
                    "            pm.expect(response.success).to.be.false;\r",
                    "            pm.expect(response.message).to.equal(\"L'élément sélectionné n'existe pas\");\r",
                    "            \r",
                    "            // Vérification supplémentaire\r",
                    "            const foodId = pm.request.url.toString().split('/').pop();\r",
                    "            pm.expect(foodId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                    "            \r",
                    "            // Stockage de l'ID pour référence future\r",
                    "            pm.test(`Attempted to delete non-existent ID: ${foodId}`, () => true);\r",
                    "        });\r",
                    "        break;\r",
                    "        \r",
                    "    default:\r",
                    "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                    "            pm.expect.fail(`Unexpected status code: ${pm.response.code} with message: ${pm.response.json().message}`);\r",
                    "        });\r",
                    "}"
                  ]
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{token}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4ebece9-74a2-4fd9-b963-dba89d49d780",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76378e4d-40dd-47d2-844e-f12bbe436e39",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ],
    "auth": {
      "type": "apikey",
      "apikey": [
        {
          "type": "string",
          "value": "{{aioKey}}",
          "key": "value"
        },
        {
          "type": "string",
          "value": "header",
          "key": "in"
        },
        {
          "type": "string",
          "value": "X-API-Key",
          "key": "key"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "86fa88dc-67dc-4028-8838-e206962048da",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "9785d81f-bdf6-490d-9dab-a3fe9f88b77e"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "f30b1286-8288-4e26-8467-06db2713735f",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "b8723a36-6176-4abe-b50c-261a2046a321"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
        "key": "token"
      },
      {
        "type": "any",
        "value": "https://my-wedding-backend.onrender.com",
        "key": "apiURL"
      },
      {
        "type": "any",
        "value": "AioAuth MDBkM2UwMGQtZTUzNi0zZTA2LWE1MTQtNTRjMzk1NzMxNGEzLjkxMjYyZDQzLWY0YTMtNDFlZC1iNGM1LTNjZDE3OGYyZGRiNQ==",
        "key": "aioKey"
      },
      {
        "type": "any",
        "value": "6814e2fb8326910078e5a3ec",
        "key": "accountId"
      },
      {
        "type": "any",
        "value": "6814e2fb8326910078e5a3ea",
        "key": "mariageId"
      },
      {
        "type": "any",
        "value": "",
        "key": "tableId"
      },
      {
        "type": "any",
        "value": "",
        "key": "guestId"
      },
      {
        "type": "any",
        "value": "",
        "key": "todoId"
      },
      {
        "type": "any",
        "value": "",
        "key": "foodId"
      },
      {
        "type": "any",
        "value": "",
        "key": "expenseId"
      }
    ],
    "info": {
      "_postman_id": "45778485-f913-4176-ac79-d103443e33ab",
      "name": "Api mariage Node",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-05-05T15:30:56.573Z",
      "postman_exported_using": "Postman/8.11.1"
    },
    "id": "41beb661-5092-45fb-bb73-a5527f7226f8",
    "name": "MEM_env",
    "values": [
      {
        "type": "any",
        "value": "https://my-wedding-backend.onrender.com",
        "key": "apiURL"
      },
      {
        "type": "any",
        "value": "AioAuth MDBkM2UwMGQtZTUzNi0zZTA2LWE1MTQtNTRjMzk1NzMxNGEzLjkxMjYyZDQzLWY0YTMtNDFlZC1iNGM1LTNjZDE3OGYyZGRiNQ==",
        "key": "aioAPIKey"
      },
      {
        "type": "any",
        "value": "67eeb9af18b604005d55cdba",
        "key": "tableId"
      },
      {
        "type": "any",
        "value": "665ddaa0ed8399005d1e584a",
        "key": "guestId"
      },
      {
        "type": "any",
        "value": "6814e2fb8326910078e5a3ea",
        "key": "mariageId"
      },
      {
        "type": "any",
        "value": "6814e2fb8326910078e5a3ec",
        "key": "accountId"
      },
      {
        "type": "any",
        "value": "",
        "key": "todoId"
      },
      {
        "type": "any",
        "value": "",
        "key": "foodId"
      },
      {
        "type": "any",
        "value": "",
        "key": "expenseId"
      }
    ]
  },
  "globals": {
    "id": "d906dcee-9e78-42cc-b4b9-092199998a19",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 25,
        "pending": 0,
        "failed": 1
      },
      "prerequests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 11,
        "pending": 0,
        "failed": 5
      },
      "testScripts": {
        "total": 15,
        "pending": 0,
        "failed": 1
      },
      "prerequestScripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 609.4,
      "responseMin": 136,
      "responseMax": 1841,
      "responseSd": 654.9914808606293,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1746459375678,
      "completed": 1746459404966
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 5,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "219e7a63-8394-4523-9901-564c39e6876d",
          "httpRequestId": "31195799-4045-4bf8-8b6e-9a5bb574249e"
        },
        "item": {
          "id": "d060e306-e373-4610-97e1-b8bf804c0b2a",
          "name": "MEM - POST Add expense HIGH QASM-TC-67",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operations",
                "add"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "category",
                  "value": "Locations"
                },
                {
                  "key": "price",
                  "value": "700"
                },
                {
                  "key": "description",
                  "value": "Location de smoking"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "21f46c1c-f892-45ec-8958-02115a01446a",
                "type": "text/javascript",
                "exec": [
                  "// Common tests for all responses\r",
                  "pm.test(\"Basic response structure is valid\", function() {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                  "    \r",
                  "    if (jsonData.success) {\r",
                  "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "    } else {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Scenario-specific tests\r",
                  "switch(pm.response.code) {\r",
                  "    case 200: // SUCCESS\r",
                  "        pm.test(\"[SUCCESS] Operation created successfully\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                  "            \r",
                  "            // 1. Basic response validation\r",
                  "            pm.expect(response.success).to.be.true;\r",
                  "            pm.expect(response.data).to.be.an(\"object\");\r",
                  "            \r",
                  "            // 2. Price conversion verification (x100)\r",
                  "            if (requestBody.price) {\r",
                  "                const expectedPrice = requestBody.price * 100;\r",
                  "                pm.expect(response.data.price).to.equal(expectedPrice);\r",
                  "                pm.test(`Price converted: ${requestBody.price} → ${expectedPrice}`, () => true);\r",
                  "                \r",
                  "                // Validate price meets schema requirements\r",
                  "                pm.expect(response.data.price).to.be.at.least(1);\r",
                  "                pm.expect(response.data.price).to.be.at.most(99999900); // Accounting for x100 conversion\r",
                  "            }\r",
                  "            \r",
                  "            // 3. Full schema validation\r",
                  "            const operationSchema = {\r",
                  "                type: \"object\",\r",
                  "                properties: {\r",
                  "                    _id: { type: \"string\" },\r",
                  "                    category: { \r",
                  "                        type: \"string\",\r",
                  "                        enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                  "                               \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                  "                               \"Faire-part\", \"Autres\"]\r",
                  "                    },\r",
                  "                    description: { \r",
                  "                        type: \"string\", \r",
                  "                        maxLength: 255 \r",
                  "                    },\r",
                  "                    price: { \r",
                  "                        type: \"number\",\r",
                  "                        minimum: 1,\r",
                  "                        maximum: 99999900 // After x100 conversion\r",
                  "                    },\r",
                  "                    date: { type: \"string\" },\r",
                  "                    mariageID: { type: \"string\" }\r",
                  "                },\r",
                  "                required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                  "            };\r",
                  "            pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                  "            \r",
                  "            \r",
                  "            // 4. Verify mariageID is correctly set\r",
                  "            if (pm.variables.get(\"mariageId\")) {\r",
                  "                pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                  "            }\r",
                  "            \r",
                  "            pm.test(`Operation created: ${JSON.stringify(response.data, null, 2)}`, () => true);\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400: // BAD REQUEST\r",
                  "        pm.test(\"[FAILED] Creation error\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            pm.expect(response.success).to.be.false;\r",
                  "            pm.expect(response.message).to.include(\"erreur\"); // Flexible error message check\r",
                  "            \r",
                  "            // Detailed validation error analysis\r",
                  "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                  "            \r",
                  "            if (!requestBody.description) {\r",
                  "                pm.test(\"Missing required field: description\", () => true);\r",
                  "            }\r",
                  "            \r",
                  "            if (requestBody.price !== undefined) {\r",
                  "                if (requestBody.price < 1) pm.test(\"Price below minimum (1)\", () => true);\r",
                  "                if (requestBody.price > 999999) pm.test(\"Price above maximum (999999)\", () => true);\r",
                  "            }\r",
                  "            \r",
                  "            if (requestBody.category && !operationSchema.properties.category.enum.includes(requestBody.category)) {\r",
                  "                pm.test(`Invalid category: ${requestBody.category}`, () => true);\r",
                  "            }\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// Quality of service tests\r",
                  "// pm.test(\"Response time is reasonable (<500ms)\", function() {\r",
                  "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"Correct content type header\", function() {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                  "// });"
                ],
                "_lastExecutionId": "0b3356c9-2954-4a3d-a72a-09b9c4a8ac03"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "budget",
              "operations",
              "add"
            ],
            "host": [
              "my-wedding-backend",
              "onrender",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6316243b-d76c-4033-885b-b7bd07658b76",
              "system": true
            },
            {
              "key": "Host",
              "value": "my-wedding-backend.onrender.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "category",
                "value": "Locations"
              },
              {
                "key": "price",
                "value": "700"
              },
              {
                "key": "description",
                "value": "Location de smoking"
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b6cf9a0b-5a48-46d5-8711-20a94468c886",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 05 May 2025 15:36:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "143"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"c6-y6o96QEFtpkCSSsDlUVtzkiD9Rw\""
            },
            {
              "key": "rndr-id",
              "value": "17aa7991-7cd6-436b"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "x-render-origin-server",
              "value": "Render"
            },
            {
              "key": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "93b150264cc49ee6-CDG"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              51,
              47,
              48,
              52,
              47,
              50,
              48,
              50,
              53,
              34,
              44,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              49,
              56,
              100,
              97,
              102,
              54,
              56,
              51,
              50,
              54,
              57,
              49,
              48,
              48,
              55,
              56,
              101,
              53,
              97,
              52,
              55,
              99,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              55,
              48,
              48,
              48,
              48,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              32,
              115,
              109,
              111,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              109,
              97,
              114,
              105,
              97,
              103,
              101,
              73,
              68,
              34,
              58,
              34,
              54,
              56,
              49,
              52,
              101,
              50,
              102,
              98,
              56,
              51,
              50,
              54,
              57,
              49,
              48,
              48,
              55,
              56,
              101,
              53,
              97,
              51,
              101,
              97,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1841,
          "responseSize": 198
        },
        "id": "d060e306-e373-4610-97e1-b8bf804c0b2a",
        "assertions": [
          {
            "assertion": "Basic response structure is valid",
            "skipped": false
          },
          {
            "assertion": "Operation created: {\n  \"category\": \"Locations\",\n  \"date\": \"23/04/2025\",\n  \"_id\": \"6818daf68326910078e5a47c\",\n  \"price\": 70000,\n  \"description\": \"Location de smoking\",\n  \"mariageID\": \"6814e2fb8326910078e5a3ea\",\n  \"__v\": 0\n}",
            "skipped": false
          },
          {
            "assertion": "[SUCCESS] Operation created successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "41bbda29-4f70-49e6-8024-6fb7a9aabd0d",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "37037684-fed8-406c-a367-6edcf7391799"
        },
        "item": {
          "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
          "name": "MEM - GET Expense HIGH QASM-TC-68",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operation",
                "{{expenseId}}"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                "type": "text/javascript",
                "exec": [
                  "// Common tests for all responses\r",
                  "pm.test(\"Basic response structure is valid\", function() {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                  "    \r",
                  "    if (jsonData.success) {\r",
                  "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                  "            return data === null || typeof data === \"object\";\r",
                  "        });\r",
                  "    } else {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Scenario-specific tests\r",
                  "switch(pm.response.code) {\r",
                  "    case 200: // SUCCESS\r",
                  "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            \r",
                  "            // 1. Basic response validation\r",
                  "            pm.expect(response.success).to.be.true;\r",
                  "            \r",
                  "            // 2. Handle both found and not-found cases\r",
                  "            if (response.data !== null) {\r",
                  "                // 3. Complete schema validation\r",
                  "                const operationSchema = {\r",
                  "                    type: \"object\",\r",
                  "                    properties: {\r",
                  "                        _id: { type: \"string\" },\r",
                  "                        category: { \r",
                  "                            type: \"string\",\r",
                  "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                  "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                  "                                   \"Faire-part\", \"Autres\"]\r",
                  "                        },\r",
                  "                        description: { \r",
                  "                            type: \"string\", \r",
                  "                            maxLength: 255 \r",
                  "                        },\r",
                  "                        price: { \r",
                  "                            type: \"number\",\r",
                  "                            minimum: 1,\r",
                  "                            maximum: 99999900\r",
                  "                        },\r",
                  "                        date: { type: \"string\" },\r",
                  "                        mariageID: { type: \"string\" }\r",
                  "                    },\r",
                  "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                  "                };\r",
                  "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                  "                \r",
                  "                // 4. Verify price format (should be stored as x100)\r",
                  "                if (response.data.price) {\r",
                  "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                  "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                  "                }\r",
                  "            } else {\r",
                  "                pm.test(\"Operation not found (null response)\", () => true);\r",
                  "            }\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400: // BAD REQUEST\r",
                  "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            pm.expect(response.success).to.be.false;\r",
                  "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// Quality of service tests\r",
                  "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                  "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"Correct content type header\", function() {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                  "// });\r",
                  "\r",
                  "// Environment validation\r",
                  "// pm.test(\"Requested ID is valid format\", function() {\r",
                  "//     const requestedId = pm.request.url.split('/').pop();\r",
                  "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                  "// });"
                ],
                "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "budget",
              "operation",
              ""
            ],
            "host": [
              "my-wedding-backend",
              "onrender",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7ad09539-3f95-40c3-bddc-ee88da8a1ad1",
              "system": true
            },
            {
              "key": "Host",
              "value": "my-wedding-backend.onrender.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a978de0c-6bb9-4d82-a2f6-515122af9a74",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 05 May 2025 15:36:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "109"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "content-security-policy",
              "value": "default-src 'none'"
            },
            {
              "key": "rndr-id",
              "value": "cdb2f477-65fe-435a"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "x-render-origin-server",
              "value": "Render"
            },
            {
              "key": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "93b1504aa9579ee6-CDG"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              98,
              117,
              100,
              103,
              101,
              116,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              47,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 733,
          "responseSize": 160
        },
        "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
        "assertions": [
          {
            "assertion": "Basic response structure is valid",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 0,
              "test": "Basic response structure is valid",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "[UNEXPECTED] Status 404",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "[UNEXPECTED] Status 404",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9b7d412e-2bb3-4e33-b39e-e97e33cf411f",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71249961-6e37-405b-95a0-39ec9faa9ca4"
        },
        "item": {
          "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
          "name": "MEM - POST Edit expense HIGH QASM-TC-69",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operations",
                "edit",
                "{{expenseId}}"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "title",
                  "value": "Blablabla"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                "type": "text/javascript",
                "exec": [
                  "// 1. BASIC RESPONSE STRUCTURE\r",
                  "pm.test(\"Response has valid structure\", function() {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                  "});\r",
                  "\r",
                  "// 2. SCENARIO HANDLING (request handling)\r",
                  "switch(pm.response.code) {\r",
                  "    case 200: // SUCCESS\r",
                  "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                  "            pm.expect(pm.response.json()).to.deep.equal({\r",
                  "                success: true,\r",
                  "                message: \"Modification enregistrée\"\r",
                  "            });\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400: // VALIDATION ERROR\r",
                  "        const errorCases = {\r",
                  "            \"invalid_fields\": {\r",
                  "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                  "                test: () => {\r",
                  "                    pm.expect(pm.response.json().err)\r",
                  "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                  "                }\r",
                  "            },\r",
                  "            \"update_failed\": {\r",
                  "                description: \"should handle update failure\",\r",
                  "                test: () => {\r",
                  "                    pm.expect(pm.response.json().message)\r",
                  "                      .to.include(\"erreur s'est produite\");\r",
                  "                }\r",
                  "            }\r",
                  "        };\r",
                  "        \r",
                  "        // Determine error type based on request\r",
                  "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                  "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                  "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                  "        \r",
                  "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                  "                                       : errorCases.update_failed.description}`, \r",
                  "                isTypeError ? errorCases.invalid_fields.test \r",
                  "                           : errorCases.update_failed.test);\r",
                  "        break;\r",
                  "        \r",
                  "    case 404: // NOT FOUND\r",
                  "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                  "            pm.expect(pm.response.json()).to.deep.equal({\r",
                  "                success: false,\r",
                  "                message: \"L'opération n'existe pas.\"\r",
                  "            });\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// 3. QUALITY CHECKS (for all responses)\r",
                  "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                  "// pm.test(\"Has JSON content-type\", () => {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                  "// });"
                ],
                "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "budget",
              "operations",
              "edit",
              ""
            ],
            "host": [
              "my-wedding-backend",
              "onrender",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4d321463-1771-44cd-a050-63a1b14f886d",
              "system": true
            },
            {
              "key": "Host",
              "value": "my-wedding-backend.onrender.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "77",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6d9ff720-729b-4327-8ff2-4b7f75eb54a6",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 05 May 2025 15:36:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "115"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "content-security-policy",
              "value": "default-src 'none'"
            },
            {
              "key": "rndr-id",
              "value": "5325d448-b09d-4688"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "x-render-origin-server",
              "value": "Render"
            },
            {
              "key": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "93b1506f3d559ee6-CDG"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              98,
              117,
              100,
              103,
              101,
              116,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              101,
              100,
              105,
              116,
              47,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 136,
          "responseSize": 167
        },
        "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
        "assertions": [
          {
            "assertion": "Response has valid structure",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 0,
              "test": "Response has valid structure",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "[FAILED] Operation not found",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "[FAILED] Operation not found",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8d071a54-30c9-4ac8-88a5-f5c3ea29e471",
          "length": 5,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "60754518-e7b3-4354-aad5-f9b48269253f"
        },
        "item": {
          "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
          "name": "MEM - DELETE Expense HIGH QASM-TC-70",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operations",
                "delete",
                "{{expenseId}}"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                "type": "text/javascript",
                "exec": [
                  "// 1. BASIC RESPONSE VALIDATION\r",
                  "pm.test(\"Response structure is valid\", function() {\r",
                  "    const response = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                  "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// 2. SCENARIO-BASED TESTS\r",
                  "const response = pm.response.json();\r",
                  "const operationId = pm.request.url.toString().split('/').pop();\r",
                  "\r",
                  "switch(pm.response.code) {\r",
                  "    case 200:\r",
                  "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                  "            pm.expect(response).to.deep.equal({\r",
                  "                success: true,\r",
                  "                message: \"Opération suprimée\"\r",
                  "            });\r",
                  "            \r",
                  "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 404:\r",
                  "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                  "            pm.expect(response).to.deep.equal({\r",
                  "                success: false,\r",
                  "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                  "            });\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400:\r",
                  "        const errorMessages = {\r",
                  "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                  "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                  "        };\r",
                  "        \r",
                  "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                  "            pm.expect(response.success).to.be.false;\r",
                  "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                  "            \r",
                  "            if (response.message === errorMessages.deletion_failed) {\r",
                  "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                  "            }\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// 3. QUALITY CHECKS\r",
                  "// pm.test(\"Response time should be < 500ms\", function() {\r",
                  "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"Should have correct content-type\", function() {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                  "//       .to.equal('application/json; charset=utf-8');\r",
                  "// });\r",
                  "\r",
                  "// 4. SECURITY CHECKS\r",
                  "// pm.test(\"Should require authentication\", function() {\r",
                  "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                  "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                  "//           .to.match(/^Bearer\\s.+/);\r",
                  "//     }\r",
                  "// });"
                ],
                "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "budget",
              "operations",
              "delete",
              ""
            ],
            "host": [
              "my-wedding-backend",
              "onrender",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d62df930-d6ba-4295-826d-f713d65f2816",
              "system": true
            },
            {
              "key": "Host",
              "value": "my-wedding-backend.onrender.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "9415081c-8b94-4edc-ba6c-d1b302155cf3",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 05 May 2025 15:36:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "116"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "content-security-policy",
              "value": "default-src 'none'"
            },
            {
              "key": "rndr-id",
              "value": "c17c0bc1-182d-458b"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "x-render-origin-server",
              "value": "Render"
            },
            {
              "key": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "93b150908e339ee6-CDG"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              68,
              69,
              76,
              69,
              84,
              69,
              32,
              47,
              97,
              112,
              105,
              47,
              98,
              117,
              100,
              103,
              101,
              116,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              100,
              101,
              108,
              101,
              116,
              101,
              47,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 174,
          "responseSize": 171
        },
        "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
        "assertions": [
          {
            "assertion": "Response structure is valid",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 0,
              "test": "Response structure is valid",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "checksum": "85811af49f0c65890dd7101d9b5a68e2",
              "id": "1278340c-9255-4858-9294-735a469cc0e8",
              "timestamp": 1746459399572,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b5f8e89d-328e-467f-8ce6-fd611b3b50c0",
          "length": 5,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2d6b377e-fdbc-41f7-ba78-b5278786a9d5"
        },
        "item": {
          "id": "1ec7f201-24c3-469d-87b8-50c6534065dd",
          "name": "MEM - GET All expenses HIGH QASM-TC-71",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operations",
                ""
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc7d6120-73a1-417b-860a-b17217ab623d",
                "type": "text/javascript",
                "exec": [
                  "// Common tests for all responses\r",
                  "pm.test(\"Basic response structure is valid\", function() {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                  "    \r",
                  "    if (jsonData.success) {\r",
                  "        pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    } else {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Scenario-specific tests\r",
                  "switch(pm.response.code) {\r",
                  "    case 200: // SUCCESS\r",
                  "        pm.test(\"[SUCCESS] Operations retrieved successfully\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            \r",
                  "            // 1. Basic response validation\r",
                  "            pm.expect(response.success).to.be.true;\r",
                  "            pm.expect(response.data).to.be.an(\"array\");\r",
                  "            \r",
                  "            // 2. Validate each operation in the array\r",
                  "            if (response.data.length > 0) {\r",
                  "                const operationSchema = {\r",
                  "                    type: \"object\",\r",
                  "                    properties: {\r",
                  "                        _id: { type: \"string\" },\r",
                  "                        category: { \r",
                  "                            type: \"string\",\r",
                  "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                  "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                  "                                   \"Faire-part\", \"Autres\"]\r",
                  "                        },\r",
                  "                        description: { \r",
                  "                            type: \"string\", \r",
                  "                            maxLength: 255 \r",
                  "                        },\r",
                  "                        price: { \r",
                  "                            type: \"number\",\r",
                  "                            minimum: 1,\r",
                  "                            maximum: 99999900 // accounting for x100 conversion\r",
                  "                        },\r",
                  "                        date: { type: \"string\" },\r",
                  "                        mariageID: { type: \"string\" }\r",
                  "                    },\r",
                  "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                  "                };\r",
                  "                \r",
                  "                response.data.forEach(operation => {\r",
                  "                    // 3. Validate against schema\r",
                  "                    pm.expect(operation).to.have.jsonSchema(operationSchema);\r",
                  "                    \r",
                  "                    // 4. Verify mariageID matches\r",
                  "                    if (pm.variables.get(\"mariageId\")) {\r",
                  "                        pm.expect(operation.mariageID.toString()).to.equal(\r",
                  "                            pm.variables.get(\"mariageId\").toString()\r",
                  "                        );\r",
                  "                    }\r",
                  "                    \r",
                  "                    // 5. Verify price format\r",
                  "                    if (operation.price) {\r",
                  "                        pm.expect(operation.price % 1).to.equal(0, \"Price should be stored as integer (cents)\");\r",
                  "                    }\r",
                  "                });\r",
                  "                \r",
                  "                pm.test(`Found ${response.data.length} operations`, () => true);\r",
                  "            } else {\r",
                  "                pm.test(\"Received empty operations array\", () => true);\r",
                  "            }\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 404: // NOT FOUND\r",
                  "        pm.test(\"[FAILED] Operations not found\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            pm.expect(response.success).to.be.false;\r",
                  "            pm.expect(response.message).to.equal(\"Impossible de charger votre journal d'opérations\");\r",
                  "            \r",
                  "            // Verify this occurs when no operations exist for mariageID\r",
                  "            pm.test(\"Likely caused by no operations for this wedding\", () => true);\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 500: // SERVER ERROR\r",
                  "        pm.test(\"[FAILED] Server error\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            pm.expect(response.success).to.be.false;\r",
                  "            pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                  "            \r",
                  "            // Verify this occurs on database errors\r",
                  "            pm.test(\"Likely caused by database connection issue\", () => true);\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// Quality of service tests\r",
                  "// pm.test(\"Response time is acceptable (<500ms)\", function() {\r",
                  "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"Correct content type header\", function() {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                  "// });\r",
                  "\r",
                  "// Environment validation\r",
                  "// pm.test(\"Request has proper authorization\", function() {\r",
                  "//     pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
                  "// });"
                ],
                "_lastExecutionId": "76ba6919-c29f-46ce-91f8-921f0eb8d95f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "budget",
              "operations",
              ""
            ],
            "host": [
              "my-wedding-backend",
              "onrender",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f9889d4-e465-4d33-a57e-677554abee84",
              "system": true
            },
            {
              "key": "Host",
              "value": "my-wedding-backend.onrender.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYyIsIm1hcmlhZ2VJRCI6IjY4MTRlMmZiODMyNjkxMDA3OGU1YTNlYSIsInJvbGUiOiJhZG1pbiIsImZpcnN0UGVyc29uIjoiQmVuamkiLCJzZWNvbmRQZXJzb24iOiJNYXJ5IiwiaWF0IjoxNzQ2MTk5Mzg4fQ.5dT-fVebn2ou8jfeS8di2rnXHUgKXj0tXLvbfmO6kQk",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "454feb62-1a2f-4ed4-a5ce-bcc2b2b9f196",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 05 May 2025 15:36:45 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "198"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"22b-qhb3WQS5hTOKNiA2WS/51kpqaRQ\""
            },
            {
              "key": "rndr-id",
              "value": "c042aba5-759e-435d"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "x-render-origin-server",
              "value": "Render"
            },
            {
              "key": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "93b150b2285e9ee6-CDG"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              65,
              110,
              105,
              109,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              51,
              47,
              48,
              52,
              47,
              50,
              48,
              50,
              53,
              34,
              44,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              49,
              56,
              98,
              100,
              51,
              53,
              56,
              51,
              50,
              54,
              57,
              49,
              48,
              48,
              55,
              56,
              101,
              53,
              97,
              52,
              52,
              55,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              53,
              48,
              48,
              48,
              48,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              110,
              105,
              109,
              97,
              116,
              101,
              117,
              114,
              32,
              100,
              101,
              32,
              109,
              97,
              114,
              105,
              97,
              103,
              101,
              34,
              44,
              34,
              109,
              97,
              114,
              105,
              97,
              103,
              101,
              73,
              68,
              34,
              58,
              34,
              54,
              56,
              49,
              52,
              101,
              50,
              102,
              98,
              56,
              51,
              50,
              54,
              57,
              49,
              48,
              48,
              55,
              56,
              101,
              53,
              97,
              51,
              101,
              97,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              51,
              47,
              48,
              52,
              47,
              50,
              48,
              50,
              53,
              34,
              44,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              49,
              56,
              98,
              100,
              100,
              97,
              56,
              51,
              50,
              54,
              57,
              49,
              48,
              48,
              55,
              56,
              101,
              53,
              97,
              52,
              52,
              57,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              53,
              48,
              48,
              48,
              48,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              32,
              49,
              48,
              48,
              32,
              99,
              104,
              97,
              105,
              115,
              101,
              115,
              34,
              44,
              34,
              109,
              97,
              114,
              105,
              97,
              103,
              101,
              73,
              68,
              34,
              58,
              34,
              54,
              56,
              49,
              52,
              101,
              50,
              102,
              98,
              56,
              51,
              50,
              54,
              57,
              49,
              48,
              48,
              55,
              56,
              101,
              53,
              97,
              51,
              101,
              97,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              51,
              47,
              48,
              52,
              47,
              50,
              48,
              50,
              53,
              34,
              44,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              49,
              56,
              100,
              97,
              102,
              54,
              56,
              51,
              50,
              54,
              57,
              49,
              48,
              48,
              55,
              56,
              101,
              53,
              97,
              52,
              55,
              99,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              55,
              48,
              48,
              48,
              48,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              32,
              115,
              109,
              111,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              109,
              97,
              114,
              105,
              97,
              103,
              101,
              73,
              68,
              34,
              58,
              34,
              54,
              56,
              49,
              52,
              101,
              50,
              102,
              98,
              56,
              51,
              50,
              54,
              57,
              49,
              48,
              48,
              55,
              56,
              101,
              53,
              97,
              51,
              101,
              97,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 163,
          "responseSize": 555
        },
        "id": "1ec7f201-24c3-469d-87b8-50c6534065dd",
        "assertions": [
          {
            "assertion": "Basic response structure is valid",
            "skipped": false
          },
          {
            "assertion": "Found 3 operations",
            "skipped": false
          },
          {
            "assertion": "[SUCCESS] Operations retrieved successfully",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1251
    },
    "failures": [
      {
        "error": {
          "name": "JSONError",
          "index": 0,
          "test": "Basic response structure is valid",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "199fa7b517f7f4eea29605c86ee4ae88",
          "id": "2a08746a-9e57-45d0-9dda-f0a8afb740d0",
          "timestamp": 1746459388889,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
          "name": "MEM - GET Expense HIGH QASM-TC-68",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operation",
                "{{expenseId}}"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                "type": "text/javascript",
                "exec": [
                  "// Common tests for all responses\r",
                  "pm.test(\"Basic response structure is valid\", function() {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                  "    \r",
                  "    if (jsonData.success) {\r",
                  "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                  "            return data === null || typeof data === \"object\";\r",
                  "        });\r",
                  "    } else {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Scenario-specific tests\r",
                  "switch(pm.response.code) {\r",
                  "    case 200: // SUCCESS\r",
                  "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            \r",
                  "            // 1. Basic response validation\r",
                  "            pm.expect(response.success).to.be.true;\r",
                  "            \r",
                  "            // 2. Handle both found and not-found cases\r",
                  "            if (response.data !== null) {\r",
                  "                // 3. Complete schema validation\r",
                  "                const operationSchema = {\r",
                  "                    type: \"object\",\r",
                  "                    properties: {\r",
                  "                        _id: { type: \"string\" },\r",
                  "                        category: { \r",
                  "                            type: \"string\",\r",
                  "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                  "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                  "                                   \"Faire-part\", \"Autres\"]\r",
                  "                        },\r",
                  "                        description: { \r",
                  "                            type: \"string\", \r",
                  "                            maxLength: 255 \r",
                  "                        },\r",
                  "                        price: { \r",
                  "                            type: \"number\",\r",
                  "                            minimum: 1,\r",
                  "                            maximum: 99999900\r",
                  "                        },\r",
                  "                        date: { type: \"string\" },\r",
                  "                        mariageID: { type: \"string\" }\r",
                  "                    },\r",
                  "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                  "                };\r",
                  "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                  "                \r",
                  "                // 4. Verify price format (should be stored as x100)\r",
                  "                if (response.data.price) {\r",
                  "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                  "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                  "                }\r",
                  "            } else {\r",
                  "                pm.test(\"Operation not found (null response)\", () => true);\r",
                  "            }\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400: // BAD REQUEST\r",
                  "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            pm.expect(response.success).to.be.false;\r",
                  "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// Quality of service tests\r",
                  "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                  "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"Correct content type header\", function() {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                  "// });\r",
                  "\r",
                  "// Environment validation\r",
                  "// pm.test(\"Requested ID is valid format\", function() {\r",
                  "//     const requestedId = pm.request.url.split('/').pop();\r",
                  "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                  "// });"
                ],
                "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
              }
            }
          ]
        },
        "parent": {
          "id": "101cac57-704a-4e53-b0b8-b47f4d962ac4",
          "name": "Expenses",
          "item": [
            {
              "id": "d060e306-e373-4610-97e1-b8bf804c0b2a",
              "name": "MEM - POST Add expense HIGH QASM-TC-67",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "add"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "category",
                      "value": "Locations"
                    },
                    {
                      "key": "price",
                      "value": "700"
                    },
                    {
                      "key": "description",
                      "value": "Location de smoking"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "21f46c1c-f892-45ec-8958-02115a01446a",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation created successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"object\");\r",
                      "            \r",
                      "            // 2. Price conversion verification (x100)\r",
                      "            if (requestBody.price) {\r",
                      "                const expectedPrice = requestBody.price * 100;\r",
                      "                pm.expect(response.data.price).to.equal(expectedPrice);\r",
                      "                pm.test(`Price converted: ${requestBody.price} → ${expectedPrice}`, () => true);\r",
                      "                \r",
                      "                // Validate price meets schema requirements\r",
                      "                pm.expect(response.data.price).to.be.at.least(1);\r",
                      "                pm.expect(response.data.price).to.be.at.most(99999900); // Accounting for x100 conversion\r",
                      "            }\r",
                      "            \r",
                      "            // 3. Full schema validation\r",
                      "            const operationSchema = {\r",
                      "                type: \"object\",\r",
                      "                properties: {\r",
                      "                    _id: { type: \"string\" },\r",
                      "                    category: { \r",
                      "                        type: \"string\",\r",
                      "                        enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                               \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                               \"Faire-part\", \"Autres\"]\r",
                      "                    },\r",
                      "                    description: { \r",
                      "                        type: \"string\", \r",
                      "                        maxLength: 255 \r",
                      "                    },\r",
                      "                    price: { \r",
                      "                        type: \"number\",\r",
                      "                        minimum: 1,\r",
                      "                        maximum: 99999900 // After x100 conversion\r",
                      "                    },\r",
                      "                    date: { type: \"string\" },\r",
                      "                    mariageID: { type: \"string\" }\r",
                      "                },\r",
                      "                required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "            };\r",
                      "            pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "            \r",
                      "            \r",
                      "            // 4. Verify mariageID is correctly set\r",
                      "            if (pm.variables.get(\"mariageId\")) {\r",
                      "                pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                      "            }\r",
                      "            \r",
                      "            pm.test(`Operation created: ${JSON.stringify(response.data, null, 2)}`, () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Creation error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.include(\"erreur\"); // Flexible error message check\r",
                      "            \r",
                      "            // Detailed validation error analysis\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            if (!requestBody.description) {\r",
                      "                pm.test(\"Missing required field: description\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.price !== undefined) {\r",
                      "                if (requestBody.price < 1) pm.test(\"Price below minimum (1)\", () => true);\r",
                      "                if (requestBody.price > 999999) pm.test(\"Price above maximum (999999)\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.category && !operationSchema.properties.category.enum.includes(requestBody.category)) {\r",
                      "                pm.test(`Invalid category: ${requestBody.category}`, () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is reasonable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "0b3356c9-2954-4a3d-a72a-09b9c4a8ac03"
                  }
                }
              ]
            },
            {
              "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
              "name": "MEM - GET Expense HIGH QASM-TC-68",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operation",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                      "            return data === null || typeof data === \"object\";\r",
                      "        });\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            \r",
                      "            // 2. Handle both found and not-found cases\r",
                      "            if (response.data !== null) {\r",
                      "                // 3. Complete schema validation\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "                \r",
                      "                // 4. Verify price format (should be stored as x100)\r",
                      "                if (response.data.price) {\r",
                      "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                      "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                      "                }\r",
                      "            } else {\r",
                      "                pm.test(\"Operation not found (null response)\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Requested ID is valid format\", function() {\r",
                      "//     const requestedId = pm.request.url.split('/').pop();\r",
                      "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "// });"
                    ],
                    "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
                  }
                }
              ]
            },
            {
              "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
              "name": "MEM - POST Edit expense HIGH QASM-TC-69",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "edit",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "title",
                      "value": "Blablabla"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE STRUCTURE\r",
                      "pm.test(\"Response has valid structure\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO HANDLING (request handling)\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Modification enregistrée\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // VALIDATION ERROR\r",
                      "        const errorCases = {\r",
                      "            \"invalid_fields\": {\r",
                      "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().err)\r",
                      "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                      "                }\r",
                      "            },\r",
                      "            \"update_failed\": {\r",
                      "                description: \"should handle update failure\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().message)\r",
                      "                      .to.include(\"erreur s'est produite\");\r",
                      "                }\r",
                      "            }\r",
                      "        };\r",
                      "        \r",
                      "        // Determine error type based on request\r",
                      "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                      "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                      "        \r",
                      "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                      "                                       : errorCases.update_failed.description}`, \r",
                      "                isTypeError ? errorCases.invalid_fields.test \r",
                      "                           : errorCases.update_failed.test);\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"L'opération n'existe pas.\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS (for all responses)\r",
                      "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                      "// pm.test(\"Has JSON content-type\", () => {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
                  }
                }
              ]
            },
            {
              "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
              "name": "MEM - DELETE Expense HIGH QASM-TC-70",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "delete",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE VALIDATION\r",
                      "pm.test(\"Response structure is valid\", function() {\r",
                      "    const response = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO-BASED TESTS\r",
                      "const response = pm.response.json();\r",
                      "const operationId = pm.request.url.toString().split('/').pop();\r",
                      "\r",
                      "switch(pm.response.code) {\r",
                      "    case 200:\r",
                      "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Opération suprimée\"\r",
                      "            });\r",
                      "            \r",
                      "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404:\r",
                      "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400:\r",
                      "        const errorMessages = {\r",
                      "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                      "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                      "        };\r",
                      "        \r",
                      "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                      "            \r",
                      "            if (response.message === errorMessages.deletion_failed) {\r",
                      "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS\r",
                      "// pm.test(\"Response time should be < 500ms\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Should have correct content-type\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                      "//       .to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// 4. SECURITY CHECKS\r",
                      "// pm.test(\"Should require authentication\", function() {\r",
                      "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                      "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                      "//           .to.match(/^Bearer\\s.+/);\r",
                      "//     }\r",
                      "// });"
                    ],
                    "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
                  }
                }
              ]
            },
            {
              "id": "1ec7f201-24c3-469d-87b8-50c6534065dd",
              "name": "MEM - GET All expenses HIGH QASM-TC-71",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    ""
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc7d6120-73a1-417b-860a-b17217ab623d",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operations retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"array\");\r",
                      "            \r",
                      "            // 2. Validate each operation in the array\r",
                      "            if (response.data.length > 0) {\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900 // accounting for x100 conversion\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                \r",
                      "                response.data.forEach(operation => {\r",
                      "                    // 3. Validate against schema\r",
                      "                    pm.expect(operation).to.have.jsonSchema(operationSchema);\r",
                      "                    \r",
                      "                    // 4. Verify mariageID matches\r",
                      "                    if (pm.variables.get(\"mariageId\")) {\r",
                      "                        pm.expect(operation.mariageID.toString()).to.equal(\r",
                      "                            pm.variables.get(\"mariageId\").toString()\r",
                      "                        );\r",
                      "                    }\r",
                      "                    \r",
                      "                    // 5. Verify price format\r",
                      "                    if (operation.price) {\r",
                      "                        pm.expect(operation.price % 1).to.equal(0, \"Price should be stored as integer (cents)\");\r",
                      "                    }\r",
                      "                });\r",
                      "                \r",
                      "                pm.test(`Found ${response.data.length} operations`, () => true);\r",
                      "            } else {\r",
                      "                pm.test(\"Received empty operations array\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operations not found\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Impossible de charger votre journal d'opérations\");\r",
                      "            \r",
                      "            // Verify this occurs when no operations exist for mariageID\r",
                      "            pm.test(\"Likely caused by no operations for this wedding\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 500: // SERVER ERROR\r",
                      "        pm.test(\"[FAILED] Server error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                      "            \r",
                      "            // Verify this occurs on database errors\r",
                      "            pm.test(\"Likely caused by database connection issue\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Request has proper authorization\", function() {\r",
                      "//     pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "76ba6919-c29f-46ce-91f8-921f0eb8d95f"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{token}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "25510c8d-6dab-4100-b88a-39dfc23b580f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ff1eec73-6652-4216-ac8b-9cde928a7245"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8a48baae-b0c7-40e7-9f78-a2fe007f2a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "68717734-1ec9-4230-ad28-793d573ace1d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "41bbda29-4f70-49e6-8024-6fb7a9aabd0d",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "37037684-fed8-406c-a367-6edcf7391799",
          "scriptId": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
          "execution": "39139fb5-68a6-48d9-bf14-1d436014cb84"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "[UNEXPECTED] Status 404",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "802d716d80fd3d3856afca2b1e0c0158",
          "id": "2af71565-8ccf-476e-b98f-2389ecdbc52b",
          "timestamp": 1746459388902,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
          "name": "MEM - GET Expense HIGH QASM-TC-68",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operation",
                "{{expenseId}}"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                "type": "text/javascript",
                "exec": [
                  "// Common tests for all responses\r",
                  "pm.test(\"Basic response structure is valid\", function() {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                  "    \r",
                  "    if (jsonData.success) {\r",
                  "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                  "            return data === null || typeof data === \"object\";\r",
                  "        });\r",
                  "    } else {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// Scenario-specific tests\r",
                  "switch(pm.response.code) {\r",
                  "    case 200: // SUCCESS\r",
                  "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            \r",
                  "            // 1. Basic response validation\r",
                  "            pm.expect(response.success).to.be.true;\r",
                  "            \r",
                  "            // 2. Handle both found and not-found cases\r",
                  "            if (response.data !== null) {\r",
                  "                // 3. Complete schema validation\r",
                  "                const operationSchema = {\r",
                  "                    type: \"object\",\r",
                  "                    properties: {\r",
                  "                        _id: { type: \"string\" },\r",
                  "                        category: { \r",
                  "                            type: \"string\",\r",
                  "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                  "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                  "                                   \"Faire-part\", \"Autres\"]\r",
                  "                        },\r",
                  "                        description: { \r",
                  "                            type: \"string\", \r",
                  "                            maxLength: 255 \r",
                  "                        },\r",
                  "                        price: { \r",
                  "                            type: \"number\",\r",
                  "                            minimum: 1,\r",
                  "                            maximum: 99999900\r",
                  "                        },\r",
                  "                        date: { type: \"string\" },\r",
                  "                        mariageID: { type: \"string\" }\r",
                  "                    },\r",
                  "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                  "                };\r",
                  "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                  "                \r",
                  "                // 4. Verify price format (should be stored as x100)\r",
                  "                if (response.data.price) {\r",
                  "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                  "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                  "                }\r",
                  "            } else {\r",
                  "                pm.test(\"Operation not found (null response)\", () => true);\r",
                  "            }\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400: // BAD REQUEST\r",
                  "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                  "            const response = pm.response.json();\r",
                  "            pm.expect(response.success).to.be.false;\r",
                  "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// Quality of service tests\r",
                  "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                  "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"Correct content type header\", function() {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                  "// });\r",
                  "\r",
                  "// Environment validation\r",
                  "// pm.test(\"Requested ID is valid format\", function() {\r",
                  "//     const requestedId = pm.request.url.split('/').pop();\r",
                  "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                  "// });"
                ],
                "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
              }
            }
          ]
        },
        "parent": {
          "id": "101cac57-704a-4e53-b0b8-b47f4d962ac4",
          "name": "Expenses",
          "item": [
            {
              "id": "d060e306-e373-4610-97e1-b8bf804c0b2a",
              "name": "MEM - POST Add expense HIGH QASM-TC-67",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "add"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "category",
                      "value": "Locations"
                    },
                    {
                      "key": "price",
                      "value": "700"
                    },
                    {
                      "key": "description",
                      "value": "Location de smoking"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "21f46c1c-f892-45ec-8958-02115a01446a",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation created successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"object\");\r",
                      "            \r",
                      "            // 2. Price conversion verification (x100)\r",
                      "            if (requestBody.price) {\r",
                      "                const expectedPrice = requestBody.price * 100;\r",
                      "                pm.expect(response.data.price).to.equal(expectedPrice);\r",
                      "                pm.test(`Price converted: ${requestBody.price} → ${expectedPrice}`, () => true);\r",
                      "                \r",
                      "                // Validate price meets schema requirements\r",
                      "                pm.expect(response.data.price).to.be.at.least(1);\r",
                      "                pm.expect(response.data.price).to.be.at.most(99999900); // Accounting for x100 conversion\r",
                      "            }\r",
                      "            \r",
                      "            // 3. Full schema validation\r",
                      "            const operationSchema = {\r",
                      "                type: \"object\",\r",
                      "                properties: {\r",
                      "                    _id: { type: \"string\" },\r",
                      "                    category: { \r",
                      "                        type: \"string\",\r",
                      "                        enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                               \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                               \"Faire-part\", \"Autres\"]\r",
                      "                    },\r",
                      "                    description: { \r",
                      "                        type: \"string\", \r",
                      "                        maxLength: 255 \r",
                      "                    },\r",
                      "                    price: { \r",
                      "                        type: \"number\",\r",
                      "                        minimum: 1,\r",
                      "                        maximum: 99999900 // After x100 conversion\r",
                      "                    },\r",
                      "                    date: { type: \"string\" },\r",
                      "                    mariageID: { type: \"string\" }\r",
                      "                },\r",
                      "                required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "            };\r",
                      "            pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "            \r",
                      "            \r",
                      "            // 4. Verify mariageID is correctly set\r",
                      "            if (pm.variables.get(\"mariageId\")) {\r",
                      "                pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                      "            }\r",
                      "            \r",
                      "            pm.test(`Operation created: ${JSON.stringify(response.data, null, 2)}`, () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Creation error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.include(\"erreur\"); // Flexible error message check\r",
                      "            \r",
                      "            // Detailed validation error analysis\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            if (!requestBody.description) {\r",
                      "                pm.test(\"Missing required field: description\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.price !== undefined) {\r",
                      "                if (requestBody.price < 1) pm.test(\"Price below minimum (1)\", () => true);\r",
                      "                if (requestBody.price > 999999) pm.test(\"Price above maximum (999999)\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.category && !operationSchema.properties.category.enum.includes(requestBody.category)) {\r",
                      "                pm.test(`Invalid category: ${requestBody.category}`, () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is reasonable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "0b3356c9-2954-4a3d-a72a-09b9c4a8ac03"
                  }
                }
              ]
            },
            {
              "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
              "name": "MEM - GET Expense HIGH QASM-TC-68",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operation",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                      "            return data === null || typeof data === \"object\";\r",
                      "        });\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            \r",
                      "            // 2. Handle both found and not-found cases\r",
                      "            if (response.data !== null) {\r",
                      "                // 3. Complete schema validation\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "                \r",
                      "                // 4. Verify price format (should be stored as x100)\r",
                      "                if (response.data.price) {\r",
                      "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                      "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                      "                }\r",
                      "            } else {\r",
                      "                pm.test(\"Operation not found (null response)\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Requested ID is valid format\", function() {\r",
                      "//     const requestedId = pm.request.url.split('/').pop();\r",
                      "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "// });"
                    ],
                    "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
                  }
                }
              ]
            },
            {
              "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
              "name": "MEM - POST Edit expense HIGH QASM-TC-69",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "edit",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "title",
                      "value": "Blablabla"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE STRUCTURE\r",
                      "pm.test(\"Response has valid structure\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO HANDLING (request handling)\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Modification enregistrée\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // VALIDATION ERROR\r",
                      "        const errorCases = {\r",
                      "            \"invalid_fields\": {\r",
                      "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().err)\r",
                      "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                      "                }\r",
                      "            },\r",
                      "            \"update_failed\": {\r",
                      "                description: \"should handle update failure\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().message)\r",
                      "                      .to.include(\"erreur s'est produite\");\r",
                      "                }\r",
                      "            }\r",
                      "        };\r",
                      "        \r",
                      "        // Determine error type based on request\r",
                      "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                      "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                      "        \r",
                      "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                      "                                       : errorCases.update_failed.description}`, \r",
                      "                isTypeError ? errorCases.invalid_fields.test \r",
                      "                           : errorCases.update_failed.test);\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"L'opération n'existe pas.\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS (for all responses)\r",
                      "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                      "// pm.test(\"Has JSON content-type\", () => {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
                  }
                }
              ]
            },
            {
              "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
              "name": "MEM - DELETE Expense HIGH QASM-TC-70",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "delete",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE VALIDATION\r",
                      "pm.test(\"Response structure is valid\", function() {\r",
                      "    const response = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO-BASED TESTS\r",
                      "const response = pm.response.json();\r",
                      "const operationId = pm.request.url.toString().split('/').pop();\r",
                      "\r",
                      "switch(pm.response.code) {\r",
                      "    case 200:\r",
                      "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Opération suprimée\"\r",
                      "            });\r",
                      "            \r",
                      "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404:\r",
                      "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400:\r",
                      "        const errorMessages = {\r",
                      "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                      "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                      "        };\r",
                      "        \r",
                      "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                      "            \r",
                      "            if (response.message === errorMessages.deletion_failed) {\r",
                      "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS\r",
                      "// pm.test(\"Response time should be < 500ms\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Should have correct content-type\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                      "//       .to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// 4. SECURITY CHECKS\r",
                      "// pm.test(\"Should require authentication\", function() {\r",
                      "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                      "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                      "//           .to.match(/^Bearer\\s.+/);\r",
                      "//     }\r",
                      "// });"
                    ],
                    "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
                  }
                }
              ]
            },
            {
              "id": "1ec7f201-24c3-469d-87b8-50c6534065dd",
              "name": "MEM - GET All expenses HIGH QASM-TC-71",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    ""
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc7d6120-73a1-417b-860a-b17217ab623d",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operations retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"array\");\r",
                      "            \r",
                      "            // 2. Validate each operation in the array\r",
                      "            if (response.data.length > 0) {\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900 // accounting for x100 conversion\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                \r",
                      "                response.data.forEach(operation => {\r",
                      "                    // 3. Validate against schema\r",
                      "                    pm.expect(operation).to.have.jsonSchema(operationSchema);\r",
                      "                    \r",
                      "                    // 4. Verify mariageID matches\r",
                      "                    if (pm.variables.get(\"mariageId\")) {\r",
                      "                        pm.expect(operation.mariageID.toString()).to.equal(\r",
                      "                            pm.variables.get(\"mariageId\").toString()\r",
                      "                        );\r",
                      "                    }\r",
                      "                    \r",
                      "                    // 5. Verify price format\r",
                      "                    if (operation.price) {\r",
                      "                        pm.expect(operation.price % 1).to.equal(0, \"Price should be stored as integer (cents)\");\r",
                      "                    }\r",
                      "                });\r",
                      "                \r",
                      "                pm.test(`Found ${response.data.length} operations`, () => true);\r",
                      "            } else {\r",
                      "                pm.test(\"Received empty operations array\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operations not found\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Impossible de charger votre journal d'opérations\");\r",
                      "            \r",
                      "            // Verify this occurs when no operations exist for mariageID\r",
                      "            pm.test(\"Likely caused by no operations for this wedding\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 500: // SERVER ERROR\r",
                      "        pm.test(\"[FAILED] Server error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                      "            \r",
                      "            // Verify this occurs on database errors\r",
                      "            pm.test(\"Likely caused by database connection issue\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Request has proper authorization\", function() {\r",
                      "//     pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "76ba6919-c29f-46ce-91f8-921f0eb8d95f"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{token}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "25510c8d-6dab-4100-b88a-39dfc23b580f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ff1eec73-6652-4216-ac8b-9cde928a7245"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8a48baae-b0c7-40e7-9f78-a2fe007f2a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "68717734-1ec9-4230-ad28-793d573ace1d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "41bbda29-4f70-49e6-8024-6fb7a9aabd0d",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "37037684-fed8-406c-a367-6edcf7391799",
          "scriptId": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
          "execution": "39139fb5-68a6-48d9-bf14-1d436014cb84"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 0,
          "test": "Response has valid structure",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "e1081eff0a210534432b35bdb2597ba1",
          "id": "ce07fd5f-2b3e-4426-b8ed-70da1dc7a74f",
          "timestamp": 1746459394207,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
          "name": "MEM - POST Edit expense HIGH QASM-TC-69",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operations",
                "edit",
                "{{expenseId}}"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "title",
                  "value": "Blablabla"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                "type": "text/javascript",
                "exec": [
                  "// 1. BASIC RESPONSE STRUCTURE\r",
                  "pm.test(\"Response has valid structure\", function() {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                  "});\r",
                  "\r",
                  "// 2. SCENARIO HANDLING (request handling)\r",
                  "switch(pm.response.code) {\r",
                  "    case 200: // SUCCESS\r",
                  "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                  "            pm.expect(pm.response.json()).to.deep.equal({\r",
                  "                success: true,\r",
                  "                message: \"Modification enregistrée\"\r",
                  "            });\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400: // VALIDATION ERROR\r",
                  "        const errorCases = {\r",
                  "            \"invalid_fields\": {\r",
                  "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                  "                test: () => {\r",
                  "                    pm.expect(pm.response.json().err)\r",
                  "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                  "                }\r",
                  "            },\r",
                  "            \"update_failed\": {\r",
                  "                description: \"should handle update failure\",\r",
                  "                test: () => {\r",
                  "                    pm.expect(pm.response.json().message)\r",
                  "                      .to.include(\"erreur s'est produite\");\r",
                  "                }\r",
                  "            }\r",
                  "        };\r",
                  "        \r",
                  "        // Determine error type based on request\r",
                  "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                  "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                  "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                  "        \r",
                  "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                  "                                       : errorCases.update_failed.description}`, \r",
                  "                isTypeError ? errorCases.invalid_fields.test \r",
                  "                           : errorCases.update_failed.test);\r",
                  "        break;\r",
                  "        \r",
                  "    case 404: // NOT FOUND\r",
                  "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                  "            pm.expect(pm.response.json()).to.deep.equal({\r",
                  "                success: false,\r",
                  "                message: \"L'opération n'existe pas.\"\r",
                  "            });\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// 3. QUALITY CHECKS (for all responses)\r",
                  "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                  "// pm.test(\"Has JSON content-type\", () => {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                  "// });"
                ],
                "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
              }
            }
          ]
        },
        "parent": {
          "id": "101cac57-704a-4e53-b0b8-b47f4d962ac4",
          "name": "Expenses",
          "item": [
            {
              "id": "d060e306-e373-4610-97e1-b8bf804c0b2a",
              "name": "MEM - POST Add expense HIGH QASM-TC-67",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "add"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "category",
                      "value": "Locations"
                    },
                    {
                      "key": "price",
                      "value": "700"
                    },
                    {
                      "key": "description",
                      "value": "Location de smoking"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "21f46c1c-f892-45ec-8958-02115a01446a",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation created successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"object\");\r",
                      "            \r",
                      "            // 2. Price conversion verification (x100)\r",
                      "            if (requestBody.price) {\r",
                      "                const expectedPrice = requestBody.price * 100;\r",
                      "                pm.expect(response.data.price).to.equal(expectedPrice);\r",
                      "                pm.test(`Price converted: ${requestBody.price} → ${expectedPrice}`, () => true);\r",
                      "                \r",
                      "                // Validate price meets schema requirements\r",
                      "                pm.expect(response.data.price).to.be.at.least(1);\r",
                      "                pm.expect(response.data.price).to.be.at.most(99999900); // Accounting for x100 conversion\r",
                      "            }\r",
                      "            \r",
                      "            // 3. Full schema validation\r",
                      "            const operationSchema = {\r",
                      "                type: \"object\",\r",
                      "                properties: {\r",
                      "                    _id: { type: \"string\" },\r",
                      "                    category: { \r",
                      "                        type: \"string\",\r",
                      "                        enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                               \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                               \"Faire-part\", \"Autres\"]\r",
                      "                    },\r",
                      "                    description: { \r",
                      "                        type: \"string\", \r",
                      "                        maxLength: 255 \r",
                      "                    },\r",
                      "                    price: { \r",
                      "                        type: \"number\",\r",
                      "                        minimum: 1,\r",
                      "                        maximum: 99999900 // After x100 conversion\r",
                      "                    },\r",
                      "                    date: { type: \"string\" },\r",
                      "                    mariageID: { type: \"string\" }\r",
                      "                },\r",
                      "                required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "            };\r",
                      "            pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "            \r",
                      "            \r",
                      "            // 4. Verify mariageID is correctly set\r",
                      "            if (pm.variables.get(\"mariageId\")) {\r",
                      "                pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                      "            }\r",
                      "            \r",
                      "            pm.test(`Operation created: ${JSON.stringify(response.data, null, 2)}`, () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Creation error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.include(\"erreur\"); // Flexible error message check\r",
                      "            \r",
                      "            // Detailed validation error analysis\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            if (!requestBody.description) {\r",
                      "                pm.test(\"Missing required field: description\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.price !== undefined) {\r",
                      "                if (requestBody.price < 1) pm.test(\"Price below minimum (1)\", () => true);\r",
                      "                if (requestBody.price > 999999) pm.test(\"Price above maximum (999999)\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.category && !operationSchema.properties.category.enum.includes(requestBody.category)) {\r",
                      "                pm.test(`Invalid category: ${requestBody.category}`, () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is reasonable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "0b3356c9-2954-4a3d-a72a-09b9c4a8ac03"
                  }
                }
              ]
            },
            {
              "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
              "name": "MEM - GET Expense HIGH QASM-TC-68",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operation",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                      "            return data === null || typeof data === \"object\";\r",
                      "        });\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            \r",
                      "            // 2. Handle both found and not-found cases\r",
                      "            if (response.data !== null) {\r",
                      "                // 3. Complete schema validation\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "                \r",
                      "                // 4. Verify price format (should be stored as x100)\r",
                      "                if (response.data.price) {\r",
                      "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                      "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                      "                }\r",
                      "            } else {\r",
                      "                pm.test(\"Operation not found (null response)\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Requested ID is valid format\", function() {\r",
                      "//     const requestedId = pm.request.url.split('/').pop();\r",
                      "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "// });"
                    ],
                    "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
                  }
                }
              ]
            },
            {
              "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
              "name": "MEM - POST Edit expense HIGH QASM-TC-69",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "edit",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "title",
                      "value": "Blablabla"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE STRUCTURE\r",
                      "pm.test(\"Response has valid structure\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO HANDLING (request handling)\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Modification enregistrée\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // VALIDATION ERROR\r",
                      "        const errorCases = {\r",
                      "            \"invalid_fields\": {\r",
                      "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().err)\r",
                      "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                      "                }\r",
                      "            },\r",
                      "            \"update_failed\": {\r",
                      "                description: \"should handle update failure\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().message)\r",
                      "                      .to.include(\"erreur s'est produite\");\r",
                      "                }\r",
                      "            }\r",
                      "        };\r",
                      "        \r",
                      "        // Determine error type based on request\r",
                      "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                      "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                      "        \r",
                      "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                      "                                       : errorCases.update_failed.description}`, \r",
                      "                isTypeError ? errorCases.invalid_fields.test \r",
                      "                           : errorCases.update_failed.test);\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"L'opération n'existe pas.\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS (for all responses)\r",
                      "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                      "// pm.test(\"Has JSON content-type\", () => {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
                  }
                }
              ]
            },
            {
              "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
              "name": "MEM - DELETE Expense HIGH QASM-TC-70",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "delete",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE VALIDATION\r",
                      "pm.test(\"Response structure is valid\", function() {\r",
                      "    const response = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO-BASED TESTS\r",
                      "const response = pm.response.json();\r",
                      "const operationId = pm.request.url.toString().split('/').pop();\r",
                      "\r",
                      "switch(pm.response.code) {\r",
                      "    case 200:\r",
                      "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Opération suprimée\"\r",
                      "            });\r",
                      "            \r",
                      "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404:\r",
                      "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400:\r",
                      "        const errorMessages = {\r",
                      "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                      "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                      "        };\r",
                      "        \r",
                      "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                      "            \r",
                      "            if (response.message === errorMessages.deletion_failed) {\r",
                      "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS\r",
                      "// pm.test(\"Response time should be < 500ms\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Should have correct content-type\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                      "//       .to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// 4. SECURITY CHECKS\r",
                      "// pm.test(\"Should require authentication\", function() {\r",
                      "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                      "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                      "//           .to.match(/^Bearer\\s.+/);\r",
                      "//     }\r",
                      "// });"
                    ],
                    "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
                  }
                }
              ]
            },
            {
              "id": "1ec7f201-24c3-469d-87b8-50c6534065dd",
              "name": "MEM - GET All expenses HIGH QASM-TC-71",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    ""
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc7d6120-73a1-417b-860a-b17217ab623d",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operations retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"array\");\r",
                      "            \r",
                      "            // 2. Validate each operation in the array\r",
                      "            if (response.data.length > 0) {\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900 // accounting for x100 conversion\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                \r",
                      "                response.data.forEach(operation => {\r",
                      "                    // 3. Validate against schema\r",
                      "                    pm.expect(operation).to.have.jsonSchema(operationSchema);\r",
                      "                    \r",
                      "                    // 4. Verify mariageID matches\r",
                      "                    if (pm.variables.get(\"mariageId\")) {\r",
                      "                        pm.expect(operation.mariageID.toString()).to.equal(\r",
                      "                            pm.variables.get(\"mariageId\").toString()\r",
                      "                        );\r",
                      "                    }\r",
                      "                    \r",
                      "                    // 5. Verify price format\r",
                      "                    if (operation.price) {\r",
                      "                        pm.expect(operation.price % 1).to.equal(0, \"Price should be stored as integer (cents)\");\r",
                      "                    }\r",
                      "                });\r",
                      "                \r",
                      "                pm.test(`Found ${response.data.length} operations`, () => true);\r",
                      "            } else {\r",
                      "                pm.test(\"Received empty operations array\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operations not found\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Impossible de charger votre journal d'opérations\");\r",
                      "            \r",
                      "            // Verify this occurs when no operations exist for mariageID\r",
                      "            pm.test(\"Likely caused by no operations for this wedding\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 500: // SERVER ERROR\r",
                      "        pm.test(\"[FAILED] Server error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                      "            \r",
                      "            // Verify this occurs on database errors\r",
                      "            pm.test(\"Likely caused by database connection issue\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Request has proper authorization\", function() {\r",
                      "//     pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "76ba6919-c29f-46ce-91f8-921f0eb8d95f"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{token}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "25510c8d-6dab-4100-b88a-39dfc23b580f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ff1eec73-6652-4216-ac8b-9cde928a7245"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8a48baae-b0c7-40e7-9f78-a2fe007f2a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "68717734-1ec9-4230-ad28-793d573ace1d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "9b7d412e-2bb3-4e33-b39e-e97e33cf411f",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71249961-6e37-405b-95a0-39ec9faa9ca4",
          "scriptId": "905518a8-78d7-4d63-8347-5d2bf154cf77",
          "execution": "b4e76b13-91f4-4002-be34-037889d18b19"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "[FAILED] Operation not found",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "7ce06243a545f230cf014fc38adc7270",
          "id": "1db8d0e6-2c93-4ba6-beb0-a2df99c3f327",
          "timestamp": 1746459394211,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
          "name": "MEM - POST Edit expense HIGH QASM-TC-69",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operations",
                "edit",
                "{{expenseId}}"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "title",
                  "value": "Blablabla"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                "type": "text/javascript",
                "exec": [
                  "// 1. BASIC RESPONSE STRUCTURE\r",
                  "pm.test(\"Response has valid structure\", function() {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                  "});\r",
                  "\r",
                  "// 2. SCENARIO HANDLING (request handling)\r",
                  "switch(pm.response.code) {\r",
                  "    case 200: // SUCCESS\r",
                  "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                  "            pm.expect(pm.response.json()).to.deep.equal({\r",
                  "                success: true,\r",
                  "                message: \"Modification enregistrée\"\r",
                  "            });\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400: // VALIDATION ERROR\r",
                  "        const errorCases = {\r",
                  "            \"invalid_fields\": {\r",
                  "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                  "                test: () => {\r",
                  "                    pm.expect(pm.response.json().err)\r",
                  "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                  "                }\r",
                  "            },\r",
                  "            \"update_failed\": {\r",
                  "                description: \"should handle update failure\",\r",
                  "                test: () => {\r",
                  "                    pm.expect(pm.response.json().message)\r",
                  "                      .to.include(\"erreur s'est produite\");\r",
                  "                }\r",
                  "            }\r",
                  "        };\r",
                  "        \r",
                  "        // Determine error type based on request\r",
                  "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                  "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                  "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                  "        \r",
                  "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                  "                                       : errorCases.update_failed.description}`, \r",
                  "                isTypeError ? errorCases.invalid_fields.test \r",
                  "                           : errorCases.update_failed.test);\r",
                  "        break;\r",
                  "        \r",
                  "    case 404: // NOT FOUND\r",
                  "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                  "            pm.expect(pm.response.json()).to.deep.equal({\r",
                  "                success: false,\r",
                  "                message: \"L'opération n'existe pas.\"\r",
                  "            });\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// 3. QUALITY CHECKS (for all responses)\r",
                  "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                  "// pm.test(\"Has JSON content-type\", () => {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                  "// });"
                ],
                "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
              }
            }
          ]
        },
        "parent": {
          "id": "101cac57-704a-4e53-b0b8-b47f4d962ac4",
          "name": "Expenses",
          "item": [
            {
              "id": "d060e306-e373-4610-97e1-b8bf804c0b2a",
              "name": "MEM - POST Add expense HIGH QASM-TC-67",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "add"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "category",
                      "value": "Locations"
                    },
                    {
                      "key": "price",
                      "value": "700"
                    },
                    {
                      "key": "description",
                      "value": "Location de smoking"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "21f46c1c-f892-45ec-8958-02115a01446a",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation created successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"object\");\r",
                      "            \r",
                      "            // 2. Price conversion verification (x100)\r",
                      "            if (requestBody.price) {\r",
                      "                const expectedPrice = requestBody.price * 100;\r",
                      "                pm.expect(response.data.price).to.equal(expectedPrice);\r",
                      "                pm.test(`Price converted: ${requestBody.price} → ${expectedPrice}`, () => true);\r",
                      "                \r",
                      "                // Validate price meets schema requirements\r",
                      "                pm.expect(response.data.price).to.be.at.least(1);\r",
                      "                pm.expect(response.data.price).to.be.at.most(99999900); // Accounting for x100 conversion\r",
                      "            }\r",
                      "            \r",
                      "            // 3. Full schema validation\r",
                      "            const operationSchema = {\r",
                      "                type: \"object\",\r",
                      "                properties: {\r",
                      "                    _id: { type: \"string\" },\r",
                      "                    category: { \r",
                      "                        type: \"string\",\r",
                      "                        enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                               \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                               \"Faire-part\", \"Autres\"]\r",
                      "                    },\r",
                      "                    description: { \r",
                      "                        type: \"string\", \r",
                      "                        maxLength: 255 \r",
                      "                    },\r",
                      "                    price: { \r",
                      "                        type: \"number\",\r",
                      "                        minimum: 1,\r",
                      "                        maximum: 99999900 // After x100 conversion\r",
                      "                    },\r",
                      "                    date: { type: \"string\" },\r",
                      "                    mariageID: { type: \"string\" }\r",
                      "                },\r",
                      "                required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "            };\r",
                      "            pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "            \r",
                      "            \r",
                      "            // 4. Verify mariageID is correctly set\r",
                      "            if (pm.variables.get(\"mariageId\")) {\r",
                      "                pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                      "            }\r",
                      "            \r",
                      "            pm.test(`Operation created: ${JSON.stringify(response.data, null, 2)}`, () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Creation error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.include(\"erreur\"); // Flexible error message check\r",
                      "            \r",
                      "            // Detailed validation error analysis\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            if (!requestBody.description) {\r",
                      "                pm.test(\"Missing required field: description\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.price !== undefined) {\r",
                      "                if (requestBody.price < 1) pm.test(\"Price below minimum (1)\", () => true);\r",
                      "                if (requestBody.price > 999999) pm.test(\"Price above maximum (999999)\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.category && !operationSchema.properties.category.enum.includes(requestBody.category)) {\r",
                      "                pm.test(`Invalid category: ${requestBody.category}`, () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is reasonable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "0b3356c9-2954-4a3d-a72a-09b9c4a8ac03"
                  }
                }
              ]
            },
            {
              "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
              "name": "MEM - GET Expense HIGH QASM-TC-68",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operation",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                      "            return data === null || typeof data === \"object\";\r",
                      "        });\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            \r",
                      "            // 2. Handle both found and not-found cases\r",
                      "            if (response.data !== null) {\r",
                      "                // 3. Complete schema validation\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "                \r",
                      "                // 4. Verify price format (should be stored as x100)\r",
                      "                if (response.data.price) {\r",
                      "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                      "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                      "                }\r",
                      "            } else {\r",
                      "                pm.test(\"Operation not found (null response)\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Requested ID is valid format\", function() {\r",
                      "//     const requestedId = pm.request.url.split('/').pop();\r",
                      "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "// });"
                    ],
                    "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
                  }
                }
              ]
            },
            {
              "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
              "name": "MEM - POST Edit expense HIGH QASM-TC-69",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "edit",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "title",
                      "value": "Blablabla"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE STRUCTURE\r",
                      "pm.test(\"Response has valid structure\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO HANDLING (request handling)\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Modification enregistrée\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // VALIDATION ERROR\r",
                      "        const errorCases = {\r",
                      "            \"invalid_fields\": {\r",
                      "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().err)\r",
                      "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                      "                }\r",
                      "            },\r",
                      "            \"update_failed\": {\r",
                      "                description: \"should handle update failure\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().message)\r",
                      "                      .to.include(\"erreur s'est produite\");\r",
                      "                }\r",
                      "            }\r",
                      "        };\r",
                      "        \r",
                      "        // Determine error type based on request\r",
                      "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                      "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                      "        \r",
                      "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                      "                                       : errorCases.update_failed.description}`, \r",
                      "                isTypeError ? errorCases.invalid_fields.test \r",
                      "                           : errorCases.update_failed.test);\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"L'opération n'existe pas.\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS (for all responses)\r",
                      "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                      "// pm.test(\"Has JSON content-type\", () => {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
                  }
                }
              ]
            },
            {
              "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
              "name": "MEM - DELETE Expense HIGH QASM-TC-70",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "delete",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE VALIDATION\r",
                      "pm.test(\"Response structure is valid\", function() {\r",
                      "    const response = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO-BASED TESTS\r",
                      "const response = pm.response.json();\r",
                      "const operationId = pm.request.url.toString().split('/').pop();\r",
                      "\r",
                      "switch(pm.response.code) {\r",
                      "    case 200:\r",
                      "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Opération suprimée\"\r",
                      "            });\r",
                      "            \r",
                      "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404:\r",
                      "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400:\r",
                      "        const errorMessages = {\r",
                      "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                      "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                      "        };\r",
                      "        \r",
                      "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                      "            \r",
                      "            if (response.message === errorMessages.deletion_failed) {\r",
                      "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS\r",
                      "// pm.test(\"Response time should be < 500ms\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Should have correct content-type\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                      "//       .to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// 4. SECURITY CHECKS\r",
                      "// pm.test(\"Should require authentication\", function() {\r",
                      "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                      "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                      "//           .to.match(/^Bearer\\s.+/);\r",
                      "//     }\r",
                      "// });"
                    ],
                    "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
                  }
                }
              ]
            },
            {
              "id": "1ec7f201-24c3-469d-87b8-50c6534065dd",
              "name": "MEM - GET All expenses HIGH QASM-TC-71",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    ""
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc7d6120-73a1-417b-860a-b17217ab623d",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operations retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"array\");\r",
                      "            \r",
                      "            // 2. Validate each operation in the array\r",
                      "            if (response.data.length > 0) {\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900 // accounting for x100 conversion\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                \r",
                      "                response.data.forEach(operation => {\r",
                      "                    // 3. Validate against schema\r",
                      "                    pm.expect(operation).to.have.jsonSchema(operationSchema);\r",
                      "                    \r",
                      "                    // 4. Verify mariageID matches\r",
                      "                    if (pm.variables.get(\"mariageId\")) {\r",
                      "                        pm.expect(operation.mariageID.toString()).to.equal(\r",
                      "                            pm.variables.get(\"mariageId\").toString()\r",
                      "                        );\r",
                      "                    }\r",
                      "                    \r",
                      "                    // 5. Verify price format\r",
                      "                    if (operation.price) {\r",
                      "                        pm.expect(operation.price % 1).to.equal(0, \"Price should be stored as integer (cents)\");\r",
                      "                    }\r",
                      "                });\r",
                      "                \r",
                      "                pm.test(`Found ${response.data.length} operations`, () => true);\r",
                      "            } else {\r",
                      "                pm.test(\"Received empty operations array\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operations not found\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Impossible de charger votre journal d'opérations\");\r",
                      "            \r",
                      "            // Verify this occurs when no operations exist for mariageID\r",
                      "            pm.test(\"Likely caused by no operations for this wedding\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 500: // SERVER ERROR\r",
                      "        pm.test(\"[FAILED] Server error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                      "            \r",
                      "            // Verify this occurs on database errors\r",
                      "            pm.test(\"Likely caused by database connection issue\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Request has proper authorization\", function() {\r",
                      "//     pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "76ba6919-c29f-46ce-91f8-921f0eb8d95f"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{token}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "25510c8d-6dab-4100-b88a-39dfc23b580f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ff1eec73-6652-4216-ac8b-9cde928a7245"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8a48baae-b0c7-40e7-9f78-a2fe007f2a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "68717734-1ec9-4230-ad28-793d573ace1d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "9b7d412e-2bb3-4e33-b39e-e97e33cf411f",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71249961-6e37-405b-95a0-39ec9faa9ca4",
          "scriptId": "905518a8-78d7-4d63-8347-5d2bf154cf77",
          "execution": "b4e76b13-91f4-4002-be34-037889d18b19"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 0,
          "test": "Response structure is valid",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "849a574a73214e209056d8c41fe32380",
          "id": "0755b460-810c-46be-9a6a-50f95b1b7f1b",
          "timestamp": 1746459399564,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
          "name": "MEM - DELETE Expense HIGH QASM-TC-70",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operations",
                "delete",
                "{{expenseId}}"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                "type": "text/javascript",
                "exec": [
                  "// 1. BASIC RESPONSE VALIDATION\r",
                  "pm.test(\"Response structure is valid\", function() {\r",
                  "    const response = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                  "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// 2. SCENARIO-BASED TESTS\r",
                  "const response = pm.response.json();\r",
                  "const operationId = pm.request.url.toString().split('/').pop();\r",
                  "\r",
                  "switch(pm.response.code) {\r",
                  "    case 200:\r",
                  "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                  "            pm.expect(response).to.deep.equal({\r",
                  "                success: true,\r",
                  "                message: \"Opération suprimée\"\r",
                  "            });\r",
                  "            \r",
                  "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 404:\r",
                  "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                  "            pm.expect(response).to.deep.equal({\r",
                  "                success: false,\r",
                  "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                  "            });\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400:\r",
                  "        const errorMessages = {\r",
                  "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                  "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                  "        };\r",
                  "        \r",
                  "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                  "            pm.expect(response.success).to.be.false;\r",
                  "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                  "            \r",
                  "            if (response.message === errorMessages.deletion_failed) {\r",
                  "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                  "            }\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// 3. QUALITY CHECKS\r",
                  "// pm.test(\"Response time should be < 500ms\", function() {\r",
                  "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"Should have correct content-type\", function() {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                  "//       .to.equal('application/json; charset=utf-8');\r",
                  "// });\r",
                  "\r",
                  "// 4. SECURITY CHECKS\r",
                  "// pm.test(\"Should require authentication\", function() {\r",
                  "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                  "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                  "//           .to.match(/^Bearer\\s.+/);\r",
                  "//     }\r",
                  "// });"
                ],
                "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
              }
            }
          ]
        },
        "parent": {
          "id": "101cac57-704a-4e53-b0b8-b47f4d962ac4",
          "name": "Expenses",
          "item": [
            {
              "id": "d060e306-e373-4610-97e1-b8bf804c0b2a",
              "name": "MEM - POST Add expense HIGH QASM-TC-67",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "add"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "category",
                      "value": "Locations"
                    },
                    {
                      "key": "price",
                      "value": "700"
                    },
                    {
                      "key": "description",
                      "value": "Location de smoking"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "21f46c1c-f892-45ec-8958-02115a01446a",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation created successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"object\");\r",
                      "            \r",
                      "            // 2. Price conversion verification (x100)\r",
                      "            if (requestBody.price) {\r",
                      "                const expectedPrice = requestBody.price * 100;\r",
                      "                pm.expect(response.data.price).to.equal(expectedPrice);\r",
                      "                pm.test(`Price converted: ${requestBody.price} → ${expectedPrice}`, () => true);\r",
                      "                \r",
                      "                // Validate price meets schema requirements\r",
                      "                pm.expect(response.data.price).to.be.at.least(1);\r",
                      "                pm.expect(response.data.price).to.be.at.most(99999900); // Accounting for x100 conversion\r",
                      "            }\r",
                      "            \r",
                      "            // 3. Full schema validation\r",
                      "            const operationSchema = {\r",
                      "                type: \"object\",\r",
                      "                properties: {\r",
                      "                    _id: { type: \"string\" },\r",
                      "                    category: { \r",
                      "                        type: \"string\",\r",
                      "                        enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                               \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                               \"Faire-part\", \"Autres\"]\r",
                      "                    },\r",
                      "                    description: { \r",
                      "                        type: \"string\", \r",
                      "                        maxLength: 255 \r",
                      "                    },\r",
                      "                    price: { \r",
                      "                        type: \"number\",\r",
                      "                        minimum: 1,\r",
                      "                        maximum: 99999900 // After x100 conversion\r",
                      "                    },\r",
                      "                    date: { type: \"string\" },\r",
                      "                    mariageID: { type: \"string\" }\r",
                      "                },\r",
                      "                required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "            };\r",
                      "            pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "            \r",
                      "            \r",
                      "            // 4. Verify mariageID is correctly set\r",
                      "            if (pm.variables.get(\"mariageId\")) {\r",
                      "                pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                      "            }\r",
                      "            \r",
                      "            pm.test(`Operation created: ${JSON.stringify(response.data, null, 2)}`, () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Creation error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.include(\"erreur\"); // Flexible error message check\r",
                      "            \r",
                      "            // Detailed validation error analysis\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            if (!requestBody.description) {\r",
                      "                pm.test(\"Missing required field: description\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.price !== undefined) {\r",
                      "                if (requestBody.price < 1) pm.test(\"Price below minimum (1)\", () => true);\r",
                      "                if (requestBody.price > 999999) pm.test(\"Price above maximum (999999)\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.category && !operationSchema.properties.category.enum.includes(requestBody.category)) {\r",
                      "                pm.test(`Invalid category: ${requestBody.category}`, () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is reasonable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "0b3356c9-2954-4a3d-a72a-09b9c4a8ac03"
                  }
                }
              ]
            },
            {
              "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
              "name": "MEM - GET Expense HIGH QASM-TC-68",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operation",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                      "            return data === null || typeof data === \"object\";\r",
                      "        });\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            \r",
                      "            // 2. Handle both found and not-found cases\r",
                      "            if (response.data !== null) {\r",
                      "                // 3. Complete schema validation\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "                \r",
                      "                // 4. Verify price format (should be stored as x100)\r",
                      "                if (response.data.price) {\r",
                      "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                      "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                      "                }\r",
                      "            } else {\r",
                      "                pm.test(\"Operation not found (null response)\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Requested ID is valid format\", function() {\r",
                      "//     const requestedId = pm.request.url.split('/').pop();\r",
                      "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "// });"
                    ],
                    "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
                  }
                }
              ]
            },
            {
              "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
              "name": "MEM - POST Edit expense HIGH QASM-TC-69",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "edit",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "title",
                      "value": "Blablabla"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE STRUCTURE\r",
                      "pm.test(\"Response has valid structure\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO HANDLING (request handling)\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Modification enregistrée\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // VALIDATION ERROR\r",
                      "        const errorCases = {\r",
                      "            \"invalid_fields\": {\r",
                      "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().err)\r",
                      "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                      "                }\r",
                      "            },\r",
                      "            \"update_failed\": {\r",
                      "                description: \"should handle update failure\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().message)\r",
                      "                      .to.include(\"erreur s'est produite\");\r",
                      "                }\r",
                      "            }\r",
                      "        };\r",
                      "        \r",
                      "        // Determine error type based on request\r",
                      "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                      "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                      "        \r",
                      "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                      "                                       : errorCases.update_failed.description}`, \r",
                      "                isTypeError ? errorCases.invalid_fields.test \r",
                      "                           : errorCases.update_failed.test);\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"L'opération n'existe pas.\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS (for all responses)\r",
                      "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                      "// pm.test(\"Has JSON content-type\", () => {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
                  }
                }
              ]
            },
            {
              "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
              "name": "MEM - DELETE Expense HIGH QASM-TC-70",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "delete",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE VALIDATION\r",
                      "pm.test(\"Response structure is valid\", function() {\r",
                      "    const response = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO-BASED TESTS\r",
                      "const response = pm.response.json();\r",
                      "const operationId = pm.request.url.toString().split('/').pop();\r",
                      "\r",
                      "switch(pm.response.code) {\r",
                      "    case 200:\r",
                      "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Opération suprimée\"\r",
                      "            });\r",
                      "            \r",
                      "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404:\r",
                      "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400:\r",
                      "        const errorMessages = {\r",
                      "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                      "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                      "        };\r",
                      "        \r",
                      "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                      "            \r",
                      "            if (response.message === errorMessages.deletion_failed) {\r",
                      "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS\r",
                      "// pm.test(\"Response time should be < 500ms\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Should have correct content-type\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                      "//       .to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// 4. SECURITY CHECKS\r",
                      "// pm.test(\"Should require authentication\", function() {\r",
                      "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                      "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                      "//           .to.match(/^Bearer\\s.+/);\r",
                      "//     }\r",
                      "// });"
                    ],
                    "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
                  }
                }
              ]
            },
            {
              "id": "1ec7f201-24c3-469d-87b8-50c6534065dd",
              "name": "MEM - GET All expenses HIGH QASM-TC-71",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    ""
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc7d6120-73a1-417b-860a-b17217ab623d",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operations retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"array\");\r",
                      "            \r",
                      "            // 2. Validate each operation in the array\r",
                      "            if (response.data.length > 0) {\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900 // accounting for x100 conversion\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                \r",
                      "                response.data.forEach(operation => {\r",
                      "                    // 3. Validate against schema\r",
                      "                    pm.expect(operation).to.have.jsonSchema(operationSchema);\r",
                      "                    \r",
                      "                    // 4. Verify mariageID matches\r",
                      "                    if (pm.variables.get(\"mariageId\")) {\r",
                      "                        pm.expect(operation.mariageID.toString()).to.equal(\r",
                      "                            pm.variables.get(\"mariageId\").toString()\r",
                      "                        );\r",
                      "                    }\r",
                      "                    \r",
                      "                    // 5. Verify price format\r",
                      "                    if (operation.price) {\r",
                      "                        pm.expect(operation.price % 1).to.equal(0, \"Price should be stored as integer (cents)\");\r",
                      "                    }\r",
                      "                });\r",
                      "                \r",
                      "                pm.test(`Found ${response.data.length} operations`, () => true);\r",
                      "            } else {\r",
                      "                pm.test(\"Received empty operations array\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operations not found\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Impossible de charger votre journal d'opérations\");\r",
                      "            \r",
                      "            // Verify this occurs when no operations exist for mariageID\r",
                      "            pm.test(\"Likely caused by no operations for this wedding\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 500: // SERVER ERROR\r",
                      "        pm.test(\"[FAILED] Server error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                      "            \r",
                      "            // Verify this occurs on database errors\r",
                      "            pm.test(\"Likely caused by database connection issue\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Request has proper authorization\", function() {\r",
                      "//     pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "76ba6919-c29f-46ce-91f8-921f0eb8d95f"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{token}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "25510c8d-6dab-4100-b88a-39dfc23b580f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ff1eec73-6652-4216-ac8b-9cde928a7245"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8a48baae-b0c7-40e7-9f78-a2fe007f2a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "68717734-1ec9-4230-ad28-793d573ace1d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "8d071a54-30c9-4ac8-88a5-f5c3ea29e471",
          "length": 5,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "60754518-e7b3-4354-aad5-f9b48269253f",
          "scriptId": "3d049a44-4c08-4843-90b4-96a554a7076d",
          "execution": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "checksum": "85811af49f0c65890dd7101d9b5a68e2",
          "id": "1278340c-9255-4858-9294-735a469cc0e8",
          "timestamp": 1746459399572,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
          "name": "MEM - DELETE Expense HIGH QASM-TC-70",
          "request": {
            "url": {
              "path": [
                "api",
                "budget",
                "operations",
                "delete",
                "{{expenseId}}"
              ],
              "host": [
                "{{apiURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                "type": "text/javascript",
                "exec": [
                  "// 1. BASIC RESPONSE VALIDATION\r",
                  "pm.test(\"Response structure is valid\", function() {\r",
                  "    const response = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                  "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// 2. SCENARIO-BASED TESTS\r",
                  "const response = pm.response.json();\r",
                  "const operationId = pm.request.url.toString().split('/').pop();\r",
                  "\r",
                  "switch(pm.response.code) {\r",
                  "    case 200:\r",
                  "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                  "            pm.expect(response).to.deep.equal({\r",
                  "                success: true,\r",
                  "                message: \"Opération suprimée\"\r",
                  "            });\r",
                  "            \r",
                  "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 404:\r",
                  "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                  "            pm.expect(response).to.deep.equal({\r",
                  "                success: false,\r",
                  "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                  "            });\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    case 400:\r",
                  "        const errorMessages = {\r",
                  "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                  "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                  "        };\r",
                  "        \r",
                  "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                  "            pm.expect(response.success).to.be.false;\r",
                  "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                  "            \r",
                  "            if (response.message === errorMessages.deletion_failed) {\r",
                  "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                  "            }\r",
                  "        });\r",
                  "        break;\r",
                  "        \r",
                  "    default:\r",
                  "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                  "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                  "        });\r",
                  "}\r",
                  "\r",
                  "// 3. QUALITY CHECKS\r",
                  "// pm.test(\"Response time should be < 500ms\", function() {\r",
                  "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"Should have correct content-type\", function() {\r",
                  "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                  "//       .to.equal('application/json; charset=utf-8');\r",
                  "// });\r",
                  "\r",
                  "// 4. SECURITY CHECKS\r",
                  "// pm.test(\"Should require authentication\", function() {\r",
                  "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                  "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                  "//           .to.match(/^Bearer\\s.+/);\r",
                  "//     }\r",
                  "// });"
                ],
                "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
              }
            }
          ]
        },
        "parent": {
          "id": "101cac57-704a-4e53-b0b8-b47f4d962ac4",
          "name": "Expenses",
          "item": [
            {
              "id": "d060e306-e373-4610-97e1-b8bf804c0b2a",
              "name": "MEM - POST Add expense HIGH QASM-TC-67",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "add"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "category",
                      "value": "Locations"
                    },
                    {
                      "key": "price",
                      "value": "700"
                    },
                    {
                      "key": "description",
                      "value": "Location de smoking"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "21f46c1c-f892-45ec-8958-02115a01446a",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation created successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"object\");\r",
                      "            \r",
                      "            // 2. Price conversion verification (x100)\r",
                      "            if (requestBody.price) {\r",
                      "                const expectedPrice = requestBody.price * 100;\r",
                      "                pm.expect(response.data.price).to.equal(expectedPrice);\r",
                      "                pm.test(`Price converted: ${requestBody.price} → ${expectedPrice}`, () => true);\r",
                      "                \r",
                      "                // Validate price meets schema requirements\r",
                      "                pm.expect(response.data.price).to.be.at.least(1);\r",
                      "                pm.expect(response.data.price).to.be.at.most(99999900); // Accounting for x100 conversion\r",
                      "            }\r",
                      "            \r",
                      "            // 3. Full schema validation\r",
                      "            const operationSchema = {\r",
                      "                type: \"object\",\r",
                      "                properties: {\r",
                      "                    _id: { type: \"string\" },\r",
                      "                    category: { \r",
                      "                        type: \"string\",\r",
                      "                        enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                               \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                               \"Faire-part\", \"Autres\"]\r",
                      "                    },\r",
                      "                    description: { \r",
                      "                        type: \"string\", \r",
                      "                        maxLength: 255 \r",
                      "                    },\r",
                      "                    price: { \r",
                      "                        type: \"number\",\r",
                      "                        minimum: 1,\r",
                      "                        maximum: 99999900 // After x100 conversion\r",
                      "                    },\r",
                      "                    date: { type: \"string\" },\r",
                      "                    mariageID: { type: \"string\" }\r",
                      "                },\r",
                      "                required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "            };\r",
                      "            pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "            \r",
                      "            \r",
                      "            // 4. Verify mariageID is correctly set\r",
                      "            if (pm.variables.get(\"mariageId\")) {\r",
                      "                pm.expect(response.data.mariageID.toString()).to.equal(pm.variables.get(\"mariageId\").toString());\r",
                      "            }\r",
                      "            \r",
                      "            pm.test(`Operation created: ${JSON.stringify(response.data, null, 2)}`, () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Creation error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.include(\"erreur\"); // Flexible error message check\r",
                      "            \r",
                      "            // Detailed validation error analysis\r",
                      "            const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "            \r",
                      "            if (!requestBody.description) {\r",
                      "                pm.test(\"Missing required field: description\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.price !== undefined) {\r",
                      "                if (requestBody.price < 1) pm.test(\"Price below minimum (1)\", () => true);\r",
                      "                if (requestBody.price > 999999) pm.test(\"Price above maximum (999999)\", () => true);\r",
                      "            }\r",
                      "            \r",
                      "            if (requestBody.category && !operationSchema.properties.category.enum.includes(requestBody.category)) {\r",
                      "                pm.test(`Invalid category: ${requestBody.category}`, () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is reasonable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "0b3356c9-2954-4a3d-a72a-09b9c4a8ac03"
                  }
                }
              ]
            },
            {
              "id": "8a9b3b4d-aa43-4e43-90ea-46850d16bd03",
              "name": "MEM - GET Expense HIGH QASM-TC-68",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operation",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8060b87b-c2cb-44b5-add6-cfa4036b3f91",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\").that.satisfies(data => {\r",
                      "            return data === null || typeof data === \"object\";\r",
                      "        });\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            \r",
                      "            // 2. Handle both found and not-found cases\r",
                      "            if (response.data !== null) {\r",
                      "                // 3. Complete schema validation\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                pm.expect(response.data).to.have.jsonSchema(operationSchema);\r",
                      "                \r",
                      "                // 4. Verify price format (should be stored as x100)\r",
                      "                if (response.data.price) {\r",
                      "                    pm.expect(response.data.price % 1).to.equal(0, \"Price should be an integer (stored as cents)\");\r",
                      "                    pm.test(`Price value: ${response.data.price/100}`, () => true);\r",
                      "                }\r",
                      "            } else {\r",
                      "                pm.test(\"Operation not found (null response)\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // BAD REQUEST\r",
                      "        pm.test(\"[FAILED] Retrieval error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Oups, une erreur s'est produite lors de la récupération de l'opération\");\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<300ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Requested ID is valid format\", function() {\r",
                      "//     const requestedId = pm.request.url.split('/').pop();\r",
                      "//     pm.expect(requestedId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "// });"
                    ],
                    "_lastExecutionId": "39139fb5-68a6-48d9-bf14-1d436014cb84"
                  }
                }
              ]
            },
            {
              "id": "68f422ad-1a1d-46b9-8682-251c6b6902da",
              "name": "MEM - POST Edit expense HIGH QASM-TC-69",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "edit",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "title",
                      "value": "Blablabla"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"category\": \"Locations\",\r\n  \"description\": \"Smoking\",\r\n  \"price\": 200\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "905518a8-78d7-4d63-8347-5d2bf154cf77",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE STRUCTURE\r",
                      "pm.test(\"Response has valid structure\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.any.keys(\"success\", \"message\", \"err\")\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO HANDLING (request handling)\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operation updated\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Modification enregistrée\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400: // VALIDATION ERROR\r",
                      "        const errorCases = {\r",
                      "            \"invalid_fields\": {\r",
                      "                description: \"should reject invalid field (empty, invalid type or value)\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().err)\r",
                      "                      .to.equal(\"Tous les champs doivent être valides.\");\r",
                      "                }\r",
                      "            },\r",
                      "            \"update_failed\": {\r",
                      "                description: \"should handle update failure\",\r",
                      "                test: () => {\r",
                      "                    pm.expect(pm.response.json().message)\r",
                      "                      .to.include(\"erreur s'est produite\");\r",
                      "                }\r",
                      "            }\r",
                      "        };\r",
                      "        \r",
                      "        // Determine error type based on request\r",
                      "        const requestBody = JSON.parse(pm.request.body.raw || '{}');\r",
                      "        const isTypeError = typeof requestBody.price !== 'number' || \r",
                      "                          !['Locations', 'Habillement/Beauté', /*...*/].includes(requestBody.category);\r",
                      "        \r",
                      "        pm.test(`[FAILED] ${isTypeError ? errorCases.invalid_fields.description \r",
                      "                                       : errorCases.update_failed.description}`, \r",
                      "                isTypeError ? errorCases.invalid_fields.test \r",
                      "                           : errorCases.update_failed.test);\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operation not found\", function() {\r",
                      "            pm.expect(pm.response.json()).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"L'opération n'existe pas.\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(pm.response.json())}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS (for all responses)\r",
                      "// pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
                      "// pm.test(\"Has JSON content-type\", () => {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "b4e76b13-91f4-4002-be34-037889d18b19"
                  }
                }
              ]
            },
            {
              "id": "e0e3baf0-edca-49a6-a505-904042ddb191",
              "name": "MEM - DELETE Expense HIGH QASM-TC-70",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    "delete",
                    "{{expenseId}}"
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d049a44-4c08-4843-90b4-96a554a7076d",
                    "type": "text/javascript",
                    "exec": [
                      "// 1. BASIC RESPONSE VALIDATION\r",
                      "pm.test(\"Response structure is valid\", function() {\r",
                      "    const response = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// 2. SCENARIO-BASED TESTS\r",
                      "const response = pm.response.json();\r",
                      "const operationId = pm.request.url.toString().split('/').pop();\r",
                      "\r",
                      "switch(pm.response.code) {\r",
                      "    case 200:\r",
                      "        pm.test(\"[SUCCESS] Operation should be deleted\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: true,\r",
                      "                message: \"Opération suprimée\"\r",
                      "            });\r",
                      "            \r",
                      "            pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404:\r",
                      "        pm.test(\"[NOT FOUND] Should handle non-existent operation\", function() {\r",
                      "            pm.expect(response).to.deep.equal({\r",
                      "                success: false,\r",
                      "                message: \"Oups, l'opération que vous souhaitez supprimer n'existe pas\"\r",
                      "            });\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 400:\r",
                      "        const errorMessages = {\r",
                      "            deletion_failed: \"Oups, une erreur s'est produite lors de la suppression du l'opération\",\r",
                      "            server_error: \"Oups, une erreur s'est produite lors de la suppression de l'opération\"\r",
                      "        };\r",
                      "        \r",
                      "        pm.test(\"[FAILED] Should handle deletion error\", function() {\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(Object.values(errorMessages)).to.include(response.message);\r",
                      "            \r",
                      "            if (response.message === errorMessages.deletion_failed) {\r",
                      "                pm.expect(operationId).to.match(/^[0-9a-fA-F]{24}$/);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected response: ${JSON.stringify(response)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// 3. QUALITY CHECKS\r",
                      "// pm.test(\"Response time should be < 500ms\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Should have correct content-type\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type'))\r",
                      "//       .to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// 4. SECURITY CHECKS\r",
                      "// pm.test(\"Should require authentication\", function() {\r",
                      "//     if (pm.response.code !== 404) { // 404 peut être accessible sans auth\r",
                      "//         pm.expect(pm.request.headers.get('Authorization'))\r",
                      "//           .to.match(/^Bearer\\s.+/);\r",
                      "//     }\r",
                      "// });"
                    ],
                    "_lastExecutionId": "8e28e17b-ba4d-41ef-860f-53a5ac240906"
                  }
                }
              ]
            },
            {
              "id": "1ec7f201-24c3-469d-87b8-50c6534065dd",
              "name": "MEM - GET All expenses HIGH QASM-TC-71",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "budget",
                    "operations",
                    ""
                  ],
                  "host": [
                    "{{apiURL}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc7d6120-73a1-417b-860a-b17217ab623d",
                    "type": "text/javascript",
                    "exec": [
                      "// Common tests for all responses\r",
                      "pm.test(\"Basic response structure is valid\", function() {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
                      "    \r",
                      "    if (jsonData.success) {\r",
                      "        pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario-specific tests\r",
                      "switch(pm.response.code) {\r",
                      "    case 200: // SUCCESS\r",
                      "        pm.test(\"[SUCCESS] Operations retrieved successfully\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            \r",
                      "            // 1. Basic response validation\r",
                      "            pm.expect(response.success).to.be.true;\r",
                      "            pm.expect(response.data).to.be.an(\"array\");\r",
                      "            \r",
                      "            // 2. Validate each operation in the array\r",
                      "            if (response.data.length > 0) {\r",
                      "                const operationSchema = {\r",
                      "                    type: \"object\",\r",
                      "                    properties: {\r",
                      "                        _id: { type: \"string\" },\r",
                      "                        category: { \r",
                      "                            type: \"string\",\r",
                      "                            enum: [\"Locations\", \"Habillement/Beauté\", \"Décoration/Fleurs\", \r",
                      "                                   \"Alliances/Bijoux\", \"Animation\", \"Traiteur\", \r",
                      "                                   \"Faire-part\", \"Autres\"]\r",
                      "                        },\r",
                      "                        description: { \r",
                      "                            type: \"string\", \r",
                      "                            maxLength: 255 \r",
                      "                        },\r",
                      "                        price: { \r",
                      "                            type: \"number\",\r",
                      "                            minimum: 1,\r",
                      "                            maximum: 99999900 // accounting for x100 conversion\r",
                      "                        },\r",
                      "                        date: { type: \"string\" },\r",
                      "                        mariageID: { type: \"string\" }\r",
                      "                    },\r",
                      "                    required: [\"_id\", \"category\", \"description\", \"price\", \"mariageID\"]\r",
                      "                };\r",
                      "                \r",
                      "                response.data.forEach(operation => {\r",
                      "                    // 3. Validate against schema\r",
                      "                    pm.expect(operation).to.have.jsonSchema(operationSchema);\r",
                      "                    \r",
                      "                    // 4. Verify mariageID matches\r",
                      "                    if (pm.variables.get(\"mariageId\")) {\r",
                      "                        pm.expect(operation.mariageID.toString()).to.equal(\r",
                      "                            pm.variables.get(\"mariageId\").toString()\r",
                      "                        );\r",
                      "                    }\r",
                      "                    \r",
                      "                    // 5. Verify price format\r",
                      "                    if (operation.price) {\r",
                      "                        pm.expect(operation.price % 1).to.equal(0, \"Price should be stored as integer (cents)\");\r",
                      "                    }\r",
                      "                });\r",
                      "                \r",
                      "                pm.test(`Found ${response.data.length} operations`, () => true);\r",
                      "            } else {\r",
                      "                pm.test(\"Received empty operations array\", () => true);\r",
                      "            }\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 404: // NOT FOUND\r",
                      "        pm.test(\"[FAILED] Operations not found\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Impossible de charger votre journal d'opérations\");\r",
                      "            \r",
                      "            // Verify this occurs when no operations exist for mariageID\r",
                      "            pm.test(\"Likely caused by no operations for this wedding\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    case 500: // SERVER ERROR\r",
                      "        pm.test(\"[FAILED] Server error\", function() {\r",
                      "            const response = pm.response.json();\r",
                      "            pm.expect(response.success).to.be.false;\r",
                      "            pm.expect(response.message).to.equal(\"Echec serveur\");\r",
                      "            \r",
                      "            // Verify this occurs on database errors\r",
                      "            pm.test(\"Likely caused by database connection issue\", () => true);\r",
                      "        });\r",
                      "        break;\r",
                      "        \r",
                      "    default:\r",
                      "        pm.test(`[UNEXPECTED] Status ${pm.response.code}`, function() {\r",
                      "            pm.expect.fail(`Unexpected status code: ${pm.response.code}\\nResponse: ${JSON.stringify(pm.response.json(), null, 2)}`);\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Quality of service tests\r",
                      "// pm.test(\"Response time is acceptable (<500ms)\", function() {\r",
                      "//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Correct content type header\", function() {\r",
                      "//     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
                      "// });\r",
                      "\r",
                      "// Environment validation\r",
                      "// pm.test(\"Request has proper authorization\", function() {\r",
                      "//     pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
                      "// });"
                    ],
                    "_lastExecutionId": "76ba6919-c29f-46ce-91f8-921f0eb8d95f"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{token}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "25510c8d-6dab-4100-b88a-39dfc23b580f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ff1eec73-6652-4216-ac8b-9cde928a7245"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8a48baae-b0c7-40e7-9f78-a2fe007f2a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "68717734-1ec9-4230-ad28-793d573ace1d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "8d071a54-30c9-4ac8-88a5-f5c3ea29e471",
          "length": 5,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "60754518-e7b3-4354-aad5-f9b48269253f",
          "scriptId": "3d049a44-4c08-4843-90b4-96a554a7076d"
        }
      }
    ],
    "error": null
  }
}